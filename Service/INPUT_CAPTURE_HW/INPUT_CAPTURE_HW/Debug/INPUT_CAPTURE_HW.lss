
INPUT_CAPTURE_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000bb8  00000c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800076  00800076  00000c62  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000431  00000000  00000000  00003c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065a  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000046fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000849  00000000  00000000  00004fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_10>
  2c:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  8a:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialization>:

/* Description : Initialize PINS Directions       */

void DIO_voidInitialization (void)
{
	DDRA = DIO_u8_PORTA_DIRECTIONS;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIRECTIONS;
  96:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIRECTIONS;
  98:	84 e1       	ldi	r24, 0x14	; 20
  9a:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_u8_PORTD_DIRECTIONS;
  9c:	8f eb       	ldi	r24, 0xBF	; 191
  9e:	81 bb       	out	0x11, r24	; 17

}/*END OF Initialization Function                 */
  a0:	08 95       	ret

000000a2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PinNumber , u8 Copy_u8PinValue)
{

	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	e8 f4       	brcc	.+58     	; 0xe0 <DIO_voidSetPinValue+0x3e>
	{
		/*  Check value passed to fuction HIGH    */

		if (Copy_u8PinValue == DIO_u8_HIGH )
  a6:	61 30       	cpi	r22, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <DIO_voidSetPinValue+0x22>
		{
			/*   MAKE pin numer Copy_u8PinNumber HIGH */

			SET_BIT(PORTA , Copy_u8PinNumber);
  aa:	4b b3       	in	r20, 0x1b	; 27
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinValue+0x16>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinValue+0x12>
  bc:	cb 01       	movw	r24, r22
  be:	84 2b       	or	r24, r20
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret
		/*  Check value passed to fuction LOW    */
		else 
		{
			/*   MAKE pin numer Copy_u8PinNumber LOW */

			CLEAR_BIT(PORTA, Copy_u8PinNumber);
  c4:	4b b3       	in	r20, 0x1b	; 27
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_voidSetPinValue+0x30>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_voidSetPinValue+0x2c>
  d6:	cb 01       	movw	r24, r22
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
		}

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
  e0:	98 2f       	mov	r25, r24
  e2:	98 50       	subi	r25, 0x08	; 8
  e4:	98 30       	cpi	r25, 0x08	; 8
  e6:	e8 f4       	brcc	.+58     	; 0x122 <DIO_voidSetPinValue+0x80>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_voidSetPinValue+0x64>
		{
			SET_BIT (PORTB , Copy_u8PinNumber);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinValue+0x58>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinValue+0x54>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTB , Copy_u8PinNumber);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinValue+0x72>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinValue+0x6e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		}

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 122:	98 2f       	mov	r25, r24
 124:	90 51       	subi	r25, 0x10	; 16
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	e8 f4       	brcc	.+58     	; 0x164 <DIO_voidSetPinValue+0xc2>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 12a:	61 30       	cpi	r22, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_voidSetPinValue+0xa6>
		{
			SET_BIT (PORTC , Copy_u8PinNumber);
 12e:	45 b3       	in	r20, 0x15	; 21
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinValue+0x9a>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinValue+0x96>
 140:	cb 01       	movw	r24, r22
 142:	84 2b       	or	r24, r20
 144:	85 bb       	out	0x15, r24	; 21
 146:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTC , Copy_u8PinNumber);
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinValue+0xb4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinValue+0xb0>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	85 bb       	out	0x15, r24	; 21
 162:	08 95       	ret
		}	
	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 164:	88 51       	subi	r24, 0x18	; 24
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	e0 f4       	brcc	.+56     	; 0x1a2 <DIO_voidSetPinValue+0x100>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <DIO_voidSetPinValue+0xe6>
		{
			SET_BIT (PORTD , Copy_u8PinNumber);
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinValue+0xda>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinValue+0xd6>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTD , Copy_u8PinNumber);
 188:	42 b3       	in	r20, 0x12	; 18
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_voidSetPinValue+0xf4>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_voidSetPinValue+0xf0>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret

000001a4 <DIO_u8GETPinValue>:
/*               Value to either High or Low      */

u8 DIO_u8GETPinValue(u8 Copy_u8PinNumber )
{
	u8 LOC_u8ReturnedPinValue;
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	58 f4       	brcc	.+22     	; 0x1be <DIO_u8GETPinValue+0x1a>
	{
		LOC_u8ReturnedPinValue = GET_BIT(PINA,Copy_u8PinNumber);
 1a8:	29 b3       	in	r18, 0x19	; 25
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	a9 01       	movw	r20, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_u8GETPinValue+0x10>
 1b0:	55 95       	asr	r21
 1b2:	47 95       	ror	r20
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_u8GETPinValue+0xc>
 1b8:	94 2f       	mov	r25, r20
 1ba:	91 70       	andi	r25, 0x01	; 1
 1bc:	2b c0       	rjmp	.+86     	; 0x214 <DIO_u8GETPinValue+0x70>
	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
 1be:	48 2f       	mov	r20, r24
 1c0:	48 50       	subi	r20, 0x08	; 8
 1c2:	48 30       	cpi	r20, 0x08	; 8
 1c4:	58 f4       	brcc	.+22     	; 0x1dc <DIO_u8GETPinValue+0x38>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - (DIO_u8_PORTA_SIZE);
		LOC_u8ReturnedPinValue = GET_BIT(PINB , Copy_u8PinNumber);
 1c6:	26 b3       	in	r18, 0x16	; 22
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	c9 01       	movw	r24, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_u8GETPinValue+0x2e>
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	4a 95       	dec	r20
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_u8GETPinValue+0x2a>
 1d6:	98 2f       	mov	r25, r24
 1d8:	91 70       	andi	r25, 0x01	; 1
 1da:	1c c0       	rjmp	.+56     	; 0x214 <DIO_u8GETPinValue+0x70>

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 1dc:	48 2f       	mov	r20, r24
 1de:	40 51       	subi	r20, 0x10	; 16
 1e0:	48 30       	cpi	r20, 0x08	; 8
 1e2:	58 f4       	brcc	.+22     	; 0x1fa <DIO_u8GETPinValue+0x56>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);
		LOC_u8ReturnedPinValue = GET_BIT(PINC , Copy_u8PinNumber);
 1e4:	23 b3       	in	r18, 0x13	; 19
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	c9 01       	movw	r24, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8GETPinValue+0x4c>
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	4a 95       	dec	r20
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8GETPinValue+0x48>
 1f4:	98 2f       	mov	r25, r24
 1f6:	91 70       	andi	r25, 0x01	; 1
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <DIO_u8GETPinValue+0x70>

	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 1fa:	88 51       	subi	r24, 0x18	; 24
 1fc:	88 30       	cpi	r24, 0x08	; 8
 1fe:	50 f4       	brcc	.+20     	; 0x214 <DIO_u8GETPinValue+0x70>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - (DIO_u8_PORTA_SIZE +  DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);
		LOC_u8ReturnedPinValue = GET_BIT(PIND , Copy_u8PinNumber);
 200:	20 b3       	in	r18, 0x10	; 16
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	a9 01       	movw	r20, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_u8GETPinValue+0x68>
 208:	55 95       	asr	r21
 20a:	47 95       	ror	r20
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_u8GETPinValue+0x64>
 210:	94 2f       	mov	r25, r20
 212:	91 70       	andi	r25, 0x01	; 1

	}
	return LOC_u8ReturnedPinValue ;
}/* END OF Function that GET The Value of a Pin     */
 214:	89 2f       	mov	r24, r25
 216:	08 95       	ret

00000218 <DIO_voidSetPinDirection>:
/* Description : This Function Set The Pin         */
/*               Direction In Run Time             */
void DIO_voidSetPinDirection (u8 Copy_u8PinNumber , u8 Copy_u8PinNumberDir )
{
	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	e8 f4       	brcc	.+58     	; 0x256 <DIO_voidSetPinDirection+0x3e>
	{
		/*  Check value passed to function HIGH    */

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	69 f4       	brne	.+26     	; 0x23a <DIO_voidSetPinDirection+0x22>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRA , Copy_u8PinNumber);
 220:	4a b3       	in	r20, 0x1a	; 26
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinDirection+0x16>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinDirection+0x12>
 232:	cb 01       	movw	r24, r22
 234:	84 2b       	or	r24, r20
 236:	8a bb       	out	0x1a, r24	; 26
 238:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRA, Copy_u8PinNumber);
 23a:	4a b3       	in	r20, 0x1a	; 26
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidSetPinDirection+0x30>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidSetPinDirection+0x2c>
 24c:	cb 01       	movw	r24, r22
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	8a bb       	out	0x1a, r24	; 26
 254:	08 95       	ret
		}

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
 256:	98 2f       	mov	r25, r24
 258:	98 50       	subi	r25, 0x08	; 8
 25a:	98 30       	cpi	r25, 0x08	; 8
 25c:	e8 f4       	brcc	.+58     	; 0x298 <DIO_voidSetPinDirection+0x80>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ;

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_voidSetPinDirection+0x64>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRB , Copy_u8PinNumber);
 262:	47 b3       	in	r20, 0x17	; 23
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_voidSetPinDirection+0x58>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	9a 95       	dec	r25
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_voidSetPinDirection+0x54>
 274:	cb 01       	movw	r24, r22
 276:	84 2b       	or	r24, r20
 278:	87 bb       	out	0x17, r24	; 23
 27a:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRB, Copy_u8PinNumber);
 27c:	47 b3       	in	r20, 0x17	; 23
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_voidSetPinDirection+0x72>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	9a 95       	dec	r25
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_voidSetPinDirection+0x6e>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	87 bb       	out	0x17, r24	; 23
 296:	08 95       	ret
		}

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 298:	98 2f       	mov	r25, r24
 29a:	90 51       	subi	r25, 0x10	; 16
 29c:	98 30       	cpi	r25, 0x08	; 8
 29e:	e8 f4       	brcc	.+58     	; 0x2da <DIO_voidSetPinDirection+0xc2>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ;

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 2a0:	61 30       	cpi	r22, 0x01	; 1
 2a2:	69 f4       	brne	.+26     	; 0x2be <DIO_voidSetPinDirection+0xa6>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRC , Copy_u8PinNumber);
 2a4:	44 b3       	in	r20, 0x14	; 20
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_voidSetPinDirection+0x9a>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	9a 95       	dec	r25
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_voidSetPinDirection+0x96>
 2b6:	cb 01       	movw	r24, r22
 2b8:	84 2b       	or	r24, r20
 2ba:	84 bb       	out	0x14, r24	; 20
 2bc:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRC, Copy_u8PinNumber);
 2be:	44 b3       	in	r20, 0x14	; 20
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	b9 01       	movw	r22, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_voidSetPinDirection+0xb4>
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	9a 95       	dec	r25
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_voidSetPinDirection+0xb0>
 2d0:	cb 01       	movw	r24, r22
 2d2:	80 95       	com	r24
 2d4:	84 23       	and	r24, r20
 2d6:	84 bb       	out	0x14, r24	; 20
 2d8:	08 95       	ret
		}
	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 2da:	88 51       	subi	r24, 0x18	; 24
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	e0 f4       	brcc	.+56     	; 0x318 <DIO_voidSetPinDirection+0x100>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ;

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 2e0:	61 30       	cpi	r22, 0x01	; 1
 2e2:	69 f4       	brne	.+26     	; 0x2fe <DIO_voidSetPinDirection+0xe6>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRD , Copy_u8PinNumber);
 2e4:	41 b3       	in	r20, 0x11	; 17
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinDirection+0xda>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinDirection+0xd6>
 2f6:	cb 01       	movw	r24, r22
 2f8:	84 2b       	or	r24, r20
 2fa:	81 bb       	out	0x11, r24	; 17
 2fc:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRD, Copy_u8PinNumber);
 2fe:	41 b3       	in	r20, 0x11	; 17
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_voidSetPinDirection+0xf4>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_voidSetPinDirection+0xf0>
 310:	cb 01       	movw	r24, r22
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	81 bb       	out	0x11, r24	; 17
 318:	08 95       	ret

0000031a <DIO_voidTogglePin>:


void DIO_voidTogglePin (u8 Copy_u8PinNumber  )
{
	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	68 f4       	brcc	.+26     	; 0x338 <DIO_voidTogglePin+0x1e>
	{
		TOGGLE_BIT(PORTA ,Copy_u8PinNumber);
 31e:	4b b3       	in	r20, 0x1b	; 27
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidTogglePin+0x12>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidTogglePin+0xe>
 330:	cb 01       	movw	r24, r22
 332:	84 27       	eor	r24, r20
 334:	8b bb       	out	0x1b, r24	; 27
 336:	08 95       	ret

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
 338:	98 2f       	mov	r25, r24
 33a:	98 50       	subi	r25, 0x08	; 8
 33c:	98 30       	cpi	r25, 0x08	; 8
 33e:	68 f4       	brcc	.+26     	; 0x35a <DIO_voidTogglePin+0x40>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ;
		TOGGLE_BIT(PORTB ,Copy_u8PinNumber);
 340:	48 b3       	in	r20, 0x18	; 24
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	b9 01       	movw	r22, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_voidTogglePin+0x34>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	9a 95       	dec	r25
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_voidTogglePin+0x30>
 352:	cb 01       	movw	r24, r22
 354:	84 27       	eor	r24, r20
 356:	88 bb       	out	0x18, r24	; 24
 358:	08 95       	ret


	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 35a:	98 2f       	mov	r25, r24
 35c:	90 51       	subi	r25, 0x10	; 16
 35e:	98 30       	cpi	r25, 0x08	; 8
 360:	68 f4       	brcc	.+26     	; 0x37c <DIO_voidTogglePin+0x62>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ;
		TOGGLE_BIT(PORTC ,Copy_u8PinNumber);
 362:	45 b3       	in	r20, 0x15	; 21
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	b9 01       	movw	r22, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_voidTogglePin+0x56>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	9a 95       	dec	r25
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_voidTogglePin+0x52>
 374:	cb 01       	movw	r24, r22
 376:	84 27       	eor	r24, r20
 378:	85 bb       	out	0x15, r24	; 21
 37a:	08 95       	ret

	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 37c:	88 51       	subi	r24, 0x18	; 24
 37e:	88 30       	cpi	r24, 0x08	; 8
 380:	60 f4       	brcc	.+24     	; 0x39a <DIO_voidTogglePin+0x80>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ;

		TOGGLE_BIT(PORTD ,Copy_u8PinNumber);
 382:	42 b3       	in	r20, 0x12	; 18
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_voidTogglePin+0x76>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_voidTogglePin+0x72>
 394:	cb 01       	movw	r24, r22
 396:	84 27       	eor	r24, r20
 398:	82 bb       	out	0x12, r24	; 18
 39a:	08 95       	ret

0000039c <GIE_voidEnable>:
	/***********************************************************/	
	/** !comment : From Data Sheet : To Enable GIE you must	   */
	/**            set Bit Number 7 in SREG REGISTER by 1      */
	/***********************************************************/

	SET_BIT(SREG , 7);
 39c:	8f b7       	in	r24, 0x3f	; 63
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	8f bf       	out	0x3f, r24	; 63
	
}
 3a2:	08 95       	ret

000003a4 <GIE_voidDisable>:
	/***********************************************************/	
	/** !comment : From Data Sheet : To Disable GIE you must   */
	/**            cleare Bit Number 7 in SREG REGISTER by 0   */
	/***********************************************************/
	
	CLEAR_BIT(SREG , 7);
 3a4:	8f b7       	in	r24, 0x3f	; 63
 3a6:	8f 77       	andi	r24, 0x7F	; 127
 3a8:	8f bf       	out	0x3f, r24	; 63
	
}
 3aa:	08 95       	ret

000003ac <main>:
	u16 u16Duty_cycle ;
	u16 u16Period;
	u16 u16Onperiod;
	u16 u16Freq = 0;

	DIO_voidInitialization();
 3ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialization>

	LCD_vidInit();
 3b0:	0e 94 12 03 	call	0x624	; 0x624 <LCD_vidInit>

	TIMER0_void_Init();
 3b4:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_void_Init>
	TIMER0_void_SetCompareVal(127); /*	Duty 50% .. Freq = fcpu/(pre * counts)= (8000000 /8*256) */
 3b8:	8f e7       	ldi	r24, 0x7F	; 127
 3ba:	0e 94 d7 03 	call	0x7ae	; 0x7ae <TIMER0_void_SetCompareVal>
	// F = 3906.25 HZ
	///init TIMER1
	/*Normal Mode .. Pre = 1024 .. enable ICU .. Rissing Edge	*/
	TCCR1A = 0x00;
 3be:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b01000010;
 3c0:	82 e4       	ldi	r24, 0x42	; 66
 3c2:	8e bd       	out	0x2e, r24	; 46

	TCNT1H = 0;
 3c4:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 3c6:	1c bc       	out	0x2c, r1	; 44

	GIE_voidEnable();
 3c8:	0e 94 ce 01 	call	0x39c	; 0x39c <GIE_voidEnable>

	SET_BIT(TIMSK,5);	//enable ICU INT
 3cc:	89 b7       	in	r24, 0x39	; 57
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	89 bf       	out	0x39, r24	; 57
	//// end init

	while(u8flag!=4);
 3d2:	80 91 75 00 	lds	r24, 0x0075
 3d6:	84 30       	cpi	r24, 0x04	; 4
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x26>
	//LCD_go_to_xy(2,0);
	//lcd_write_char('a');

	u16Period = u16temp2 - u16temp1;
 3da:	c0 91 7c 00 	lds	r28, 0x007C
 3de:	d0 91 7d 00 	lds	r29, 0x007D
 3e2:	80 91 78 00 	lds	r24, 0x0078
 3e6:	90 91 79 00 	lds	r25, 0x0079
 3ea:	c8 1b       	sub	r28, r24
 3ec:	d9 0b       	sbc	r29, r25

	u16Onperiod = u16temp3 - u16temp2;
 3ee:	20 91 7a 00 	lds	r18, 0x007A
 3f2:	30 91 7b 00 	lds	r19, 0x007B
 3f6:	80 91 7c 00 	lds	r24, 0x007C
 3fa:	90 91 7d 00 	lds	r25, 0x007D
 3fe:	28 1b       	sub	r18, r24
 400:	39 0b       	sbc	r19, r25

	u16Duty_cycle = ((u16Onperiod*100)/u16Period);
 402:	44 e6       	ldi	r20, 0x64	; 100
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	24 9f       	mul	r18, r20
 408:	c0 01       	movw	r24, r0
 40a:	25 9f       	mul	r18, r21
 40c:	90 0d       	add	r25, r0
 40e:	34 9f       	mul	r19, r20
 410:	90 0d       	add	r25, r0
 412:	11 24       	eor	r1, r1
 414:	be 01       	movw	r22, r28
 416:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__udivmodhi4>
 41a:	06 2f       	mov	r16, r22
 41c:	17 2f       	mov	r17, r23
	//lcd_write_string("Duty Cycle =");
	//LCD_go_to_xy(1,11);
	/********************************************/


	LCD_vidWriteString("Duty Cycle =");
 41e:	80 e6       	ldi	r24, 0x60	; 96
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 48 03 	call	0x690	; 0x690 <LCD_vidWriteString>
	LCD_vidGotoXY(1,11);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	6b e0       	ldi	r22, 0x0B	; 11
 42a:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_vidGotoXY>
	LCD_u8WriteINT(u16Duty_cycle);
 42e:	80 2f       	mov	r24, r16
 430:	91 2f       	mov	r25, r17
 432:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_u8WriteINT>
	/**************************************************/
	//LCD_WriteNumber(u16Duty_cycle);
	//lcd_write_string("%");
	/***************************************/

	LCD_vidWriteChar('%');
 436:	85 e2       	ldi	r24, 0x25	; 37
 438:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_vidWriteChar>
	LCD_vidGotoXY(2,0);
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_vidGotoXY>
	//LCD_WriteNumber(u16Period);
	/**************************************************/
	//LCD_vidWriteString("Period =");
	//LCD_u8WriteINT(u16Period);
	/*****************************************************/
	LCD_vidWriteString("Freq = ");
 444:	8d e6       	ldi	r24, 0x6D	; 109
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 48 03 	call	0x690	; 0x690 <LCD_vidWriteString>

	u16Onperiod = u16temp3 - u16temp2;

	u16Duty_cycle = ((u16Onperiod*100)/u16Period);

	u16Freq = (1 / ( u16Period * f32TimerClock ));
 44c:	be 01       	movw	r22, r28
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__floatunsisf>
 456:	2d eb       	ldi	r18, 0xBD	; 189
 458:	37 e3       	ldi	r19, 0x37	; 55
 45a:	46 e8       	ldi	r20, 0x86	; 134
 45c:	55 e3       	ldi	r21, 0x35	; 53
 45e:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	80 e8       	ldi	r24, 0x80	; 128
 46c:	9f e3       	ldi	r25, 0x3F	; 63
 46e:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3>
 472:	0e 94 a9 04 	call	0x952	; 0x952 <__fixunssfsi>
 476:	dc 01       	movw	r26, r24
 478:	cb 01       	movw	r24, r22
	/**************************************************/
	//LCD_vidWriteString("Period =");
	//LCD_u8WriteINT(u16Period);
	/*****************************************************/
	LCD_vidWriteString("Freq = ");
	LCD_u8WriteINT(u16Freq);
 47a:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_u8WriteINT>
 47e:	ff cf       	rjmp	.-2      	; 0x47e <main+0xd2>

00000480 <__vector_6>:




void __vector_6(void)
{
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
	if (u8flag == 1)
 48e:	80 91 75 00 	lds	r24, 0x0075
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	51 f4       	brne	.+20     	; 0x4aa <__vector_6+0x2a>
	{
		u16temp1 = ICR1 ;
 496:	86 b5       	in	r24, 0x26	; 38
 498:	97 b5       	in	r25, 0x27	; 39
 49a:	90 93 79 00 	sts	0x0079, r25
 49e:	80 93 78 00 	sts	0x0078, r24
		u8flag =2 ;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	80 93 75 00 	sts	0x0075, r24
 4a8:	21 c0       	rjmp	.+66     	; 0x4ec <__vector_6+0x6c>
	}
	else if (u8flag == 2 )
 4aa:	80 91 75 00 	lds	r24, 0x0075
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	69 f4       	brne	.+26     	; 0x4cc <__vector_6+0x4c>
	{
		// copy 
		u16temp2 = ICR1  ;
 4b2:	86 b5       	in	r24, 0x26	; 38
 4b4:	97 b5       	in	r25, 0x27	; 39
 4b6:	90 93 7d 00 	sts	0x007D, r25
 4ba:	80 93 7c 00 	sts	0x007C, r24
		// set to falling edge 
		CLEAR_BIT(TCCR1B,6) ;
 4be:	8e b5       	in	r24, 0x2e	; 46
 4c0:	8f 7b       	andi	r24, 0xBF	; 191
 4c2:	8e bd       	out	0x2e, r24	; 46
		u8flag = 3 ;
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	80 93 75 00 	sts	0x0075, r24
 4ca:	10 c0       	rjmp	.+32     	; 0x4ec <__vector_6+0x6c>
		
	}
	else if (u8flag == 3)
 4cc:	80 91 75 00 	lds	r24, 0x0075
 4d0:	83 30       	cpi	r24, 0x03	; 3
 4d2:	61 f4       	brne	.+24     	; 0x4ec <__vector_6+0x6c>
	{
		u16temp3 =  ICR1   ;
 4d4:	86 b5       	in	r24, 0x26	; 38
 4d6:	97 b5       	in	r25, 0x27	; 39
 4d8:	90 93 7b 00 	sts	0x007B, r25
 4dc:	80 93 7a 00 	sts	0x007A, r24
		// set to rising 
		SET_BIT(TCCR1B,6) ;
 4e0:	8e b5       	in	r24, 0x2e	; 46
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	8e bd       	out	0x2e, r24	; 46
		u8flag = 4 ;
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	80 93 75 00 	sts	0x0075, r24
		
	}
	
}
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <vidPutOnBus>:
	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
}

static void vidPutOnBus( u8 u8CmdDataCpy )
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
	u8 LOC_u8Loop = LCD_DATA_D0_START ;

	DIO_voidSetPinValue( LCD_u8DATA_0 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 4fe:	c8 2f       	mov	r28, r24
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	68 2f       	mov	r22, r24
 504:	61 70       	andi	r22, 0x01	; 1
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_1 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 50c:	be 01       	movw	r22, r28
 50e:	75 95       	asr	r23
 510:	67 95       	ror	r22
 512:	61 70       	andi	r22, 0x01	; 1
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_2 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 51a:	be 01       	movw	r22, r28
 51c:	75 95       	asr	r23
 51e:	67 95       	ror	r22
 520:	75 95       	asr	r23
 522:	67 95       	ror	r22
 524:	61 70       	andi	r22, 0x01	; 1
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_3 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 52c:	be 01       	movw	r22, r28
 52e:	75 95       	asr	r23
 530:	67 95       	ror	r22
 532:	75 95       	asr	r23
 534:	67 95       	ror	r22
 536:	75 95       	asr	r23
 538:	67 95       	ror	r22
 53a:	61 70       	andi	r22, 0x01	; 1
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_4 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 542:	be 01       	movw	r22, r28
 544:	75 95       	asr	r23
 546:	67 95       	ror	r22
 548:	75 95       	asr	r23
 54a:	67 95       	ror	r22
 54c:	75 95       	asr	r23
 54e:	67 95       	ror	r22
 550:	75 95       	asr	r23
 552:	67 95       	ror	r22
 554:	61 70       	andi	r22, 0x01	; 1
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_5 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 55c:	be 01       	movw	r22, r28
 55e:	75 95       	asr	r23
 560:	67 95       	ror	r22
 562:	75 95       	asr	r23
 564:	67 95       	ror	r22
 566:	75 95       	asr	r23
 568:	67 95       	ror	r22
 56a:	75 95       	asr	r23
 56c:	67 95       	ror	r22
 56e:	75 95       	asr	r23
 570:	67 95       	ror	r22
 572:	61 70       	andi	r22, 0x01	; 1
 574:	85 e0       	ldi	r24, 0x05	; 5
 576:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_6 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 57a:	be 01       	movw	r22, r28
 57c:	06 2e       	mov	r0, r22
 57e:	67 2f       	mov	r22, r23
 580:	00 0c       	add	r0, r0
 582:	66 1f       	adc	r22, r22
 584:	77 0b       	sbc	r23, r23
 586:	00 0c       	add	r0, r0
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	61 70       	andi	r22, 0x01	; 1
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_7 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 594:	be 01       	movw	r22, r28
 596:	66 0f       	add	r22, r22
 598:	67 2f       	mov	r22, r23
 59a:	66 1f       	adc	r22, r22
 59c:	77 0b       	sbc	r23, r23
 59e:	61 70       	andi	r22, 0x01	; 1
 5a0:	87 e0       	ldi	r24, 0x07	; 7
 5a2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* lach  */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_HIGH );
 5a6:	8c e1       	ldi	r24, 0x1C	; 28
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ae:	83 ef       	ldi	r24, 0xF3	; 243
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <vidPutOnBus+0xb8>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <vidPutOnBus+0xbe>
 5b8:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 5ba:	8c e1       	ldi	r24, 0x1C	; 28
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 5c2:	83 ef       	ldi	r24, 0xF3	; 243
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <vidPutOnBus+0xcc>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <vidPutOnBus+0xd2>
 5cc:	00 00       	nop
	_delay_ms(2);

}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <LCD_vidSendCmd>:
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );

}

void LCD_vidSendCmd( u8 u8CmdCpy )
{
 5d4:	cf 93       	push	r28
 5d6:	c8 2f       	mov	r28, r24
	/** to send command  ( RS = 0 and R/W = 0 ) =====> (write instruction) */

	/* RS  0 CMD */  
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_LOW );
 5d8:	88 e1       	ldi	r24, 0x18	; 24
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 5e0:	89 e1       	ldi	r24, 0x19	; 25
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CmdCpy);
 5e8:	8c 2f       	mov	r24, r28
 5ea:	0e 94 7d 02 	call	0x4fa	; 0x4fa <vidPutOnBus>

}
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <LCD_vidWriteChar>:

void LCD_vidWriteChar( u8 u8CharCpy )
{
 5f2:	cf 93       	push	r28
 5f4:	c8 2f       	mov	r28, r24
	/** to write command   ( RS = 1 and R/W = 0 ) =====> (write to DR Reg) */

	/* RS  1 CMD */
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_HIGH );
 5f6:	88 e1       	ldi	r24, 0x18	; 24
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 5fe:	89 e1       	ldi	r24, 0x19	; 25
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
 606:	8c 2f       	mov	r24, r28
 608:	0e 94 7d 02 	call	0x4fa	; 0x4fa <vidPutOnBus>
}
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <LCD_vidClear>:
}

void LCD_vidClear( void )
{
	/*  function set (Clear  Display) */
	LCD_vidSendCmd(0b00000001);
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_vidSendCmd>
 616:	83 ef       	ldi	r24, 0xF3	; 243
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_vidClear+0xa>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_vidClear+0x10>
 620:	00 00       	nop
	/* wait 2 */
	_delay_ms(2);
}
 622:	08 95       	ret

00000624 <LCD_vidInit>:
 624:	8d e2       	ldi	r24, 0x2D	; 45
 626:	92 e2       	ldi	r25, 0x22	; 34
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <LCD_vidInit+0x4>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <LCD_vidInit+0xa>
 62e:	00 00       	nop
	/* wait 35 */
	_delay_ms(35);

	/*  function set */

	LCD_vidSendCmd(0b00111000);
 630:	88 e3       	ldi	r24, 0x38	; 56
 632:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_vidSendCmd>
 636:	89 ef       	ldi	r24, 0xF9	; 249
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <LCD_vidInit+0x16>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <LCD_vidInit+0x1c>
 640:	00 00       	nop
	/* wait 1 */
	_delay_ms(1);

	/*  function set (on/off) */
	LCD_vidSendCmd(0b00001100);
 642:	8c e0       	ldi	r24, 0x0C	; 12
 644:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_vidSendCmd>
 648:	89 ef       	ldi	r24, 0xF9	; 249
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <LCD_vidInit+0x28>
 650:	00 c0       	rjmp	.+0      	; 0x652 <LCD_vidInit+0x2e>
 652:	00 00       	nop
	/*LCD_vidSendCmd(0b00000001);*/
	/*	 wait 2                  */
	/*_delay_ms(2);	             */
	/*****************************/

	LCD_vidClear();
 654:	0e 94 08 03 	call	0x610	; 0x610 <LCD_vidClear>

	/*  function set (Entry mode set - cursor increase or decrease ) */
	LCD_vidSendCmd(0b00000110);
 658:	86 e0       	ldi	r24, 0x06	; 6
 65a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_vidSendCmd>
 65e:	83 ef       	ldi	r24, 0xF3	; 243
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <LCD_vidInit+0x3e>
 666:	00 c0       	rjmp	.+0      	; 0x668 <LCD_vidInit+0x44>
 668:	00 00       	nop
	/* wait 2 */
	_delay_ms(2);

	/* latch = 0 */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 66a:	8c e1       	ldi	r24, 0x1C	; 28
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

}
 672:	08 95       	ret

00000674 <LCD_vidGotoXY>:


void LCD_vidGotoXY( u8 u8LineNbCpy , u8 u8CharNbCpy )
{
 /* switchcase over line */
	if(  u8LineNbCpy == 1 )
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	29 f4       	brne	.+10     	; 0x682 <LCD_vidGotoXY+0xe>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_FIRST_LINE + u8CharNbCpy) );
 678:	86 2f       	mov	r24, r22
 67a:	80 58       	subi	r24, 0x80	; 128
 67c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_vidSendCmd>
 680:	08 95       	ret
			
	}
	
	else if( u8LineNbCpy == 2 )
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	21 f4       	brne	.+8      	; 0x68e <LCD_vidGotoXY+0x1a>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );
 686:	86 2f       	mov	r24, r22
 688:	80 54       	subi	r24, 0x40	; 64
 68a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_vidSendCmd>
 68e:	08 95       	ret

00000690 <LCD_vidWriteString>:
}


/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
 690:	0f 93       	push	r16
 692:	1f 93       	push	r17
 694:	cf 93       	push	r28
 696:	8c 01       	movw	r16, r24
	u8 Loc_u8Counter = 0 ;
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 698:	fc 01       	movw	r30, r24
 69a:	80 81       	ld	r24, Z
 69c:	88 23       	and	r24, r24
 69e:	51 f0       	breq	.+20     	; 0x6b4 <LCD_vidWriteString+0x24>


/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
	u8 Loc_u8Counter = 0 ;
 6a0:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
	{
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
 6a2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_vidWriteChar>
		Loc_u8Counter++;		
 6a6:	cf 5f       	subi	r28, 0xFF	; 255
/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
	u8 Loc_u8Counter = 0 ;
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 6a8:	f8 01       	movw	r30, r16
 6aa:	ec 0f       	add	r30, r28
 6ac:	f1 1d       	adc	r31, r1
 6ae:	80 81       	ld	r24, Z
 6b0:	88 23       	and	r24, r24
 6b2:	b9 f7       	brne	.-18     	; 0x6a2 <LCD_vidWriteString+0x12>
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
		Loc_u8Counter++;		
	}
	

}
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	08 95       	ret

000006bc <Private_u16Power>:

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 6bc:	66 23       	and	r22, r22
 6be:	81 f0       	breq	.+32     	; 0x6e0 <Private_u16Power+0x24>
}

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	30 e0       	ldi	r19, 0x00	; 0
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 6c4:	40 e0       	ldi	r20, 0x00	; 0
	{
		Local_u16Result*=Copy_u8Op1;
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	f9 01       	movw	r30, r18
 6ca:	e8 9f       	mul	r30, r24
 6cc:	90 01       	movw	r18, r0
 6ce:	e9 9f       	mul	r30, r25
 6d0:	30 0d       	add	r19, r0
 6d2:	f8 9f       	mul	r31, r24
 6d4:	30 0d       	add	r19, r0
 6d6:	11 24       	eor	r1, r1

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 6d8:	4f 5f       	subi	r20, 0xFF	; 255
 6da:	46 17       	cp	r20, r22
 6dc:	a9 f7       	brne	.-22     	; 0x6c8 <Private_u16Power+0xc>
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <Private_u16Power+0x28>
}

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	30 e0       	ldi	r19, 0x00	; 0
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
	{
		Local_u16Result*=Copy_u8Op1;
	}
	return Local_u16Result;
}
 6e4:	82 2f       	mov	r24, r18
 6e6:	93 2f       	mov	r25, r19
 6e8:	08 95       	ret

000006ea <LCD_u8WriteINT>:
Outputs: Error state -> 0 No Error
					 -> 1 Error
 */

u8 LCD_u8WriteINT(u16 Copy_u16NB)
{
 6ea:	cf 92       	push	r12
 6ec:	df 92       	push	r13
 6ee:	ef 92       	push	r14
 6f0:	ff 92       	push	r15
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	6c 01       	movw	r12, r24
	u8 Local_u8Error=0;

	if(Copy_u16NB==0)
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	21 f4       	brne	.+8      	; 0x706 <LCD_u8WriteINT+0x1c>
	{
		LCD_vidWriteChar(48);
 6fe:	80 e3       	ldi	r24, 0x30	; 48
 700:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_vidWriteChar>
 704:	25 c0       	rjmp	.+74     	; 0x750 <LCD_u8WriteINT+0x66>

u8 LCD_u8WriteINT(u16 Copy_u16NB)
{
	u8 Local_u8Error=0;

	if(Copy_u16NB==0)
 706:	c0 e0       	ldi	r28, 0x00	; 0
		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
		{
			Local_u8Digits++; //Increment no of digits by one

			Local_u16CopyOfNB/=10; //get rid of the most right digit
 708:	2a e0       	ldi	r18, 0x0A	; 10
 70a:	30 e0       	ldi	r19, 0x00	; 0
		u16 Local_u16CopyOfNB=Copy_u16NB;

		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
		{
			Local_u8Digits++; //Increment no of digits by one
 70c:	cf 5f       	subi	r28, 0xFF	; 255

			Local_u16CopyOfNB/=10; //get rid of the most right digit
 70e:	b9 01       	movw	r22, r18
 710:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__udivmodhi4>
 714:	cb 01       	movw	r24, r22
	{
		u8 Local_u8Digits=0,Local_u8Counter;
		u16 Local_u16CopyOfNB=Copy_u16NB;

		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	c9 f7       	brne	.-14     	; 0x70c <LCD_u8WriteINT+0x22>
		}

		Local_u16CopyOfNB=Copy_u16NB;

		/*		Loop on the number and print every single digit alone each iteration*/
		for(Local_u8Counter=0;Local_u8Counter<Local_u8Digits;Local_u8Counter++)
 71a:	cc 23       	and	r28, r28
 71c:	c9 f0       	breq	.+50     	; 0x750 <LCD_u8WriteINT+0x66>
 71e:	c1 50       	subi	r28, 0x01	; 1
 720:	dc 2d       	mov	r29, r12
 722:	1d 2d       	mov	r17, r13
		{
			/*Get the most left digit*/
			Local_u16CopyOfNB/=Private_u16Power(10,Local_u8Digits-Local_u8Counter-1);
 724:	8a e0       	ldi	r24, 0x0A	; 10
 726:	6c 2f       	mov	r22, r28
 728:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Private_u16Power>
 72c:	7c 01       	movw	r14, r24
 72e:	8d 2f       	mov	r24, r29
 730:	91 2f       	mov	r25, r17
 732:	b7 01       	movw	r22, r14
 734:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__udivmodhi4>

			/*Print the most left digit*/
			LCD_vidWriteChar(48+Local_u16CopyOfNB);
 738:	86 2f       	mov	r24, r22
 73a:	80 5d       	subi	r24, 0xD0	; 208
 73c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_vidWriteChar>

			/*Load the original number*/
			Local_u16CopyOfNB=Copy_u16NB;

			/*Get rid of the left most digit*/
			Local_u16CopyOfNB%=Private_u16Power(10,Local_u8Digits-Local_u8Counter-1);
 740:	c6 01       	movw	r24, r12
 742:	b7 01       	movw	r22, r14
 744:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__udivmodhi4>
 748:	d8 2f       	mov	r29, r24
 74a:	19 2f       	mov	r17, r25
 74c:	c1 50       	subi	r28, 0x01	; 1
 74e:	50 f7       	brcc	.-44     	; 0x724 <LCD_u8WriteINT+0x3a>
		}
	}
	return Local_u8Error;
}
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	ff 90       	pop	r15
 75a:	ef 90       	pop	r14
 75c:	df 90       	pop	r13
 75e:	cf 90       	pop	r12
 760:	08 95       	ret

00000762 <TIMER0_void_Init>:
	#elif(TIMER0_MODE == TIMER0_CTC)
		CLEAR_BIT(TCCR0 , 6);
		SET_BIT(TCCR0 , 3);
		
	#elif(TIMER0_MODE == TIMER0_FAST_PWM )
		SET_BIT(TCCR0 , 6);
 762:	83 b7       	in	r24, 0x33	; 51
 764:	80 64       	ori	r24, 0x40	; 64
 766:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 3);
 768:	83 b7       	in	r24, 0x33	; 51
 76a:	88 60       	ori	r24, 0x08	; 8
 76c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 0);
		CLEAR_BIT(TCCR0 , 1);
		CLEAR_BIT(TCCR0 , 2);
	
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_8)
		CLEAR_BIT(TCCR0 , 0);
 76e:	83 b7       	in	r24, 0x33	; 51
 770:	8e 7f       	andi	r24, 0xFE	; 254
 772:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 1);
 774:	83 b7       	in	r24, 0x33	; 51
 776:	82 60       	ori	r24, 0x02	; 2
 778:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 2);
 77a:	83 b7       	in	r24, 0x33	; 51
 77c:	8b 7f       	andi	r24, 0xFB	; 251
 77e:	83 bf       	out	0x33, r24	; 51
	
	#elif(TIMER0_COM_EVENT == TIMER0_TOGGLE)
		SET_BIT(TCCR0 , 4)
		CLEAR_BIT(TCCR0 , 5);
	#elif(TIMER0_COM_EVENT == TIMER0_CLEAR )
		CLEAR_BIT(TCCR0 , 4);
 780:	83 b7       	in	r24, 0x33	; 51
 782:	8f 7e       	andi	r24, 0xEF	; 239
 784:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 5);
 786:	83 b7       	in	r24, 0x33	; 51
 788:	80 62       	ori	r24, 0x20	; 32
 78a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 5);

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);	
 78c:	89 b7       	in	r24, 0x39	; 57
 78e:	8e 7f       	andi	r24, 0xFE	; 254
 790:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 792:	89 b7       	in	r24, 0x39	; 57
 794:	8d 7f       	andi	r24, 0xFD	; 253
 796:	89 bf       	out	0x39, r24	; 57
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);	
 798:	88 b7       	in	r24, 0x38	; 56
 79a:	81 60       	ori	r24, 0x01	; 1
 79c:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 79e:	88 b7       	in	r24, 0x38	; 56
 7a0:	82 60       	ori	r24, 0x02	; 2
 7a2:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT0 = 0 ;
 7a4:	12 be       	out	0x32, r1	; 50
	OCR0 = 0 ;
 7a6:	1c be       	out	0x3c, r1	; 60
	
	
}
 7a8:	08 95       	ret

000007aa <TIMER0_void_SetTimerReg>:

void TIMER0_void_SetTimerReg(u8 Copy_uint8Val)
{
	TCNT0 = Copy_uint8Val ;
 7aa:	82 bf       	out	0x32, r24	; 50
}
 7ac:	08 95       	ret

000007ae <TIMER0_void_SetCompareVal>:

void TIMER0_void_SetCompareVal(u8 Copy_uint8Val)
{
	OCR0 = Copy_uint8Val ;
 7ae:	8c bf       	out	0x3c, r24	; 60
}
 7b0:	08 95       	ret

000007b2 <TIMER0_void_EnableOVInt>:

void TIMER0_void_EnableOVInt(void)
{
	SET_BIT(TIMSK , 0);
 7b2:	89 b7       	in	r24, 0x39	; 57
 7b4:	81 60       	ori	r24, 0x01	; 1
 7b6:	89 bf       	out	0x39, r24	; 57
}
 7b8:	08 95       	ret

000007ba <TIMER0_void_DisableOVInt>:

void TIMER0_void_DisableOVInt(void)
{
	CLEAR_BIT(TIMSK , 0);
 7ba:	89 b7       	in	r24, 0x39	; 57
 7bc:	8e 7f       	andi	r24, 0xFE	; 254
 7be:	89 bf       	out	0x39, r24	; 57
}
 7c0:	08 95       	ret

000007c2 <TIMER0_void_EnableCTCInt>:

void TIMER0_void_EnableCTCInt(void)
{
	SET_BIT(TIMSK , 1);
 7c2:	89 b7       	in	r24, 0x39	; 57
 7c4:	82 60       	ori	r24, 0x02	; 2
 7c6:	89 bf       	out	0x39, r24	; 57
}
 7c8:	08 95       	ret

000007ca <TIMER0_void_DisableCTCInt>:

void TIMER0_void_DisableCTCInt(void)
{
	CLEAR_BIT(TIMSK , 1);
 7ca:	89 b7       	in	r24, 0x39	; 57
 7cc:	8d 7f       	andi	r24, 0xFD	; 253
 7ce:	89 bf       	out	0x39, r24	; 57
}
 7d0:	08 95       	ret

000007d2 <TIMER0_void_SetOVCallBack>:

void TIMER0_void_SetOVCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_OV_CallBack = Copy_ptr ;
 7d2:	90 93 81 00 	sts	0x0081, r25
 7d6:	80 93 80 00 	sts	0x0080, r24
}
 7da:	08 95       	ret

000007dc <TIMER0_void_SetCTCCallBack>:

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 7dc:	90 93 7f 00 	sts	0x007F, r25
 7e0:	80 93 7e 00 	sts	0x007E, r24
	
}
 7e4:	08 95       	ret

000007e6 <__vector_11>:

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	2f 93       	push	r18
 7f2:	3f 93       	push	r19
 7f4:	4f 93       	push	r20
 7f6:	5f 93       	push	r21
 7f8:	6f 93       	push	r22
 7fa:	7f 93       	push	r23
 7fc:	8f 93       	push	r24
 7fe:	9f 93       	push	r25
 800:	af 93       	push	r26
 802:	bf 93       	push	r27
 804:	ef 93       	push	r30
 806:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 808:	e0 91 80 00 	lds	r30, 0x0080
 80c:	f0 91 81 00 	lds	r31, 0x0081
 810:	09 95       	icall
}
 812:	ff 91       	pop	r31
 814:	ef 91       	pop	r30
 816:	bf 91       	pop	r27
 818:	af 91       	pop	r26
 81a:	9f 91       	pop	r25
 81c:	8f 91       	pop	r24
 81e:	7f 91       	pop	r23
 820:	6f 91       	pop	r22
 822:	5f 91       	pop	r21
 824:	4f 91       	pop	r20
 826:	3f 91       	pop	r19
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	2f 93       	push	r18
 840:	3f 93       	push	r19
 842:	4f 93       	push	r20
 844:	5f 93       	push	r21
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	af 93       	push	r26
 850:	bf 93       	push	r27
 852:	ef 93       	push	r30
 854:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 856:	e0 91 7e 00 	lds	r30, 0x007E
 85a:	f0 91 7f 00 	lds	r31, 0x007F
 85e:	09 95       	icall
}
 860:	ff 91       	pop	r31
 862:	ef 91       	pop	r30
 864:	bf 91       	pop	r27
 866:	af 91       	pop	r26
 868:	9f 91       	pop	r25
 86a:	8f 91       	pop	r24
 86c:	7f 91       	pop	r23
 86e:	6f 91       	pop	r22
 870:	5f 91       	pop	r21
 872:	4f 91       	pop	r20
 874:	3f 91       	pop	r19
 876:	2f 91       	pop	r18
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	0f 90       	pop	r0
 87e:	1f 90       	pop	r1
 880:	18 95       	reti

00000882 <__divsf3>:
 882:	0c d0       	rcall	.+24     	; 0x89c <__divsf3x>
 884:	e6 c0       	rjmp	.+460    	; 0xa52 <__fp_round>
 886:	de d0       	rcall	.+444    	; 0xa44 <__fp_pscB>
 888:	40 f0       	brcs	.+16     	; 0x89a <__divsf3+0x18>
 88a:	d5 d0       	rcall	.+426    	; 0xa36 <__fp_pscA>
 88c:	30 f0       	brcs	.+12     	; 0x89a <__divsf3+0x18>
 88e:	21 f4       	brne	.+8      	; 0x898 <__divsf3+0x16>
 890:	5f 3f       	cpi	r21, 0xFF	; 255
 892:	19 f0       	breq	.+6      	; 0x89a <__divsf3+0x18>
 894:	c7 c0       	rjmp	.+398    	; 0xa24 <__fp_inf>
 896:	51 11       	cpse	r21, r1
 898:	10 c1       	rjmp	.+544    	; 0xaba <__fp_szero>
 89a:	ca c0       	rjmp	.+404    	; 0xa30 <__fp_nan>

0000089c <__divsf3x>:
 89c:	eb d0       	rcall	.+470    	; 0xa74 <__fp_split3>
 89e:	98 f3       	brcs	.-26     	; 0x886 <__divsf3+0x4>

000008a0 <__divsf3_pse>:
 8a0:	99 23       	and	r25, r25
 8a2:	c9 f3       	breq	.-14     	; 0x896 <__divsf3+0x14>
 8a4:	55 23       	and	r21, r21
 8a6:	b1 f3       	breq	.-20     	; 0x894 <__divsf3+0x12>
 8a8:	95 1b       	sub	r25, r21
 8aa:	55 0b       	sbc	r21, r21
 8ac:	bb 27       	eor	r27, r27
 8ae:	aa 27       	eor	r26, r26
 8b0:	62 17       	cp	r22, r18
 8b2:	73 07       	cpc	r23, r19
 8b4:	84 07       	cpc	r24, r20
 8b6:	38 f0       	brcs	.+14     	; 0x8c6 <__divsf3_pse+0x26>
 8b8:	9f 5f       	subi	r25, 0xFF	; 255
 8ba:	5f 4f       	sbci	r21, 0xFF	; 255
 8bc:	22 0f       	add	r18, r18
 8be:	33 1f       	adc	r19, r19
 8c0:	44 1f       	adc	r20, r20
 8c2:	aa 1f       	adc	r26, r26
 8c4:	a9 f3       	breq	.-22     	; 0x8b0 <__divsf3_pse+0x10>
 8c6:	33 d0       	rcall	.+102    	; 0x92e <__divsf3_pse+0x8e>
 8c8:	0e 2e       	mov	r0, r30
 8ca:	3a f0       	brmi	.+14     	; 0x8da <__divsf3_pse+0x3a>
 8cc:	e0 e8       	ldi	r30, 0x80	; 128
 8ce:	30 d0       	rcall	.+96     	; 0x930 <__divsf3_pse+0x90>
 8d0:	91 50       	subi	r25, 0x01	; 1
 8d2:	50 40       	sbci	r21, 0x00	; 0
 8d4:	e6 95       	lsr	r30
 8d6:	00 1c       	adc	r0, r0
 8d8:	ca f7       	brpl	.-14     	; 0x8cc <__divsf3_pse+0x2c>
 8da:	29 d0       	rcall	.+82     	; 0x92e <__divsf3_pse+0x8e>
 8dc:	fe 2f       	mov	r31, r30
 8de:	27 d0       	rcall	.+78     	; 0x92e <__divsf3_pse+0x8e>
 8e0:	66 0f       	add	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	bb 1f       	adc	r27, r27
 8e8:	26 17       	cp	r18, r22
 8ea:	37 07       	cpc	r19, r23
 8ec:	48 07       	cpc	r20, r24
 8ee:	ab 07       	cpc	r26, r27
 8f0:	b0 e8       	ldi	r27, 0x80	; 128
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <__divsf3_pse+0x56>
 8f4:	bb 0b       	sbc	r27, r27
 8f6:	80 2d       	mov	r24, r0
 8f8:	bf 01       	movw	r22, r30
 8fa:	ff 27       	eor	r31, r31
 8fc:	93 58       	subi	r25, 0x83	; 131
 8fe:	5f 4f       	sbci	r21, 0xFF	; 255
 900:	2a f0       	brmi	.+10     	; 0x90c <__divsf3_pse+0x6c>
 902:	9e 3f       	cpi	r25, 0xFE	; 254
 904:	51 05       	cpc	r21, r1
 906:	68 f0       	brcs	.+26     	; 0x922 <__divsf3_pse+0x82>
 908:	8d c0       	rjmp	.+282    	; 0xa24 <__fp_inf>
 90a:	d7 c0       	rjmp	.+430    	; 0xaba <__fp_szero>
 90c:	5f 3f       	cpi	r21, 0xFF	; 255
 90e:	ec f3       	brlt	.-6      	; 0x90a <__divsf3_pse+0x6a>
 910:	98 3e       	cpi	r25, 0xE8	; 232
 912:	dc f3       	brlt	.-10     	; 0x90a <__divsf3_pse+0x6a>
 914:	86 95       	lsr	r24
 916:	77 95       	ror	r23
 918:	67 95       	ror	r22
 91a:	b7 95       	ror	r27
 91c:	f7 95       	ror	r31
 91e:	9f 5f       	subi	r25, 0xFF	; 255
 920:	c9 f7       	brne	.-14     	; 0x914 <__divsf3_pse+0x74>
 922:	88 0f       	add	r24, r24
 924:	91 1d       	adc	r25, r1
 926:	96 95       	lsr	r25
 928:	87 95       	ror	r24
 92a:	97 f9       	bld	r25, 7
 92c:	08 95       	ret
 92e:	e1 e0       	ldi	r30, 0x01	; 1
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	bb 1f       	adc	r27, r27
 938:	62 17       	cp	r22, r18
 93a:	73 07       	cpc	r23, r19
 93c:	84 07       	cpc	r24, r20
 93e:	ba 07       	cpc	r27, r26
 940:	20 f0       	brcs	.+8      	; 0x94a <__divsf3_pse+0xaa>
 942:	62 1b       	sub	r22, r18
 944:	73 0b       	sbc	r23, r19
 946:	84 0b       	sbc	r24, r20
 948:	ba 0b       	sbc	r27, r26
 94a:	ee 1f       	adc	r30, r30
 94c:	88 f7       	brcc	.-30     	; 0x930 <__divsf3_pse+0x90>
 94e:	e0 95       	com	r30
 950:	08 95       	ret

00000952 <__fixunssfsi>:
 952:	98 d0       	rcall	.+304    	; 0xa84 <__fp_splitA>
 954:	88 f0       	brcs	.+34     	; 0x978 <__fixunssfsi+0x26>
 956:	9f 57       	subi	r25, 0x7F	; 127
 958:	90 f0       	brcs	.+36     	; 0x97e <__fixunssfsi+0x2c>
 95a:	b9 2f       	mov	r27, r25
 95c:	99 27       	eor	r25, r25
 95e:	b7 51       	subi	r27, 0x17	; 23
 960:	a0 f0       	brcs	.+40     	; 0x98a <__fixunssfsi+0x38>
 962:	d1 f0       	breq	.+52     	; 0x998 <__fixunssfsi+0x46>
 964:	66 0f       	add	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	88 1f       	adc	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	1a f0       	brmi	.+6      	; 0x974 <__fixunssfsi+0x22>
 96e:	ba 95       	dec	r27
 970:	c9 f7       	brne	.-14     	; 0x964 <__fixunssfsi+0x12>
 972:	12 c0       	rjmp	.+36     	; 0x998 <__fixunssfsi+0x46>
 974:	b1 30       	cpi	r27, 0x01	; 1
 976:	81 f0       	breq	.+32     	; 0x998 <__fixunssfsi+0x46>
 978:	9f d0       	rcall	.+318    	; 0xab8 <__fp_zero>
 97a:	b1 e0       	ldi	r27, 0x01	; 1
 97c:	08 95       	ret
 97e:	9c c0       	rjmp	.+312    	; 0xab8 <__fp_zero>
 980:	67 2f       	mov	r22, r23
 982:	78 2f       	mov	r23, r24
 984:	88 27       	eor	r24, r24
 986:	b8 5f       	subi	r27, 0xF8	; 248
 988:	39 f0       	breq	.+14     	; 0x998 <__fixunssfsi+0x46>
 98a:	b9 3f       	cpi	r27, 0xF9	; 249
 98c:	cc f3       	brlt	.-14     	; 0x980 <__fixunssfsi+0x2e>
 98e:	86 95       	lsr	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	b3 95       	inc	r27
 996:	d9 f7       	brne	.-10     	; 0x98e <__fixunssfsi+0x3c>
 998:	3e f4       	brtc	.+14     	; 0x9a8 <__fixunssfsi+0x56>
 99a:	90 95       	com	r25
 99c:	80 95       	com	r24
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__floatunsisf>:
 9aa:	e8 94       	clt
 9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__floatsisf+0x12>

000009ae <__floatsisf>:
 9ae:	97 fb       	bst	r25, 7
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__floatsisf+0x12>
 9b2:	90 95       	com	r25
 9b4:	80 95       	com	r24
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	99 23       	and	r25, r25
 9c2:	a9 f0       	breq	.+42     	; 0x9ee <__floatsisf+0x40>
 9c4:	f9 2f       	mov	r31, r25
 9c6:	96 e9       	ldi	r25, 0x96	; 150
 9c8:	bb 27       	eor	r27, r27
 9ca:	93 95       	inc	r25
 9cc:	f6 95       	lsr	r31
 9ce:	87 95       	ror	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b7 95       	ror	r27
 9d6:	f1 11       	cpse	r31, r1
 9d8:	f8 cf       	rjmp	.-16     	; 0x9ca <__floatsisf+0x1c>
 9da:	fa f4       	brpl	.+62     	; 0xa1a <__floatsisf+0x6c>
 9dc:	bb 0f       	add	r27, r27
 9de:	11 f4       	brne	.+4      	; 0x9e4 <__floatsisf+0x36>
 9e0:	60 ff       	sbrs	r22, 0
 9e2:	1b c0       	rjmp	.+54     	; 0xa1a <__floatsisf+0x6c>
 9e4:	6f 5f       	subi	r22, 0xFF	; 255
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	16 c0       	rjmp	.+44     	; 0xa1a <__floatsisf+0x6c>
 9ee:	88 23       	and	r24, r24
 9f0:	11 f0       	breq	.+4      	; 0x9f6 <__floatsisf+0x48>
 9f2:	96 e9       	ldi	r25, 0x96	; 150
 9f4:	11 c0       	rjmp	.+34     	; 0xa18 <__floatsisf+0x6a>
 9f6:	77 23       	and	r23, r23
 9f8:	21 f0       	breq	.+8      	; 0xa02 <__floatsisf+0x54>
 9fa:	9e e8       	ldi	r25, 0x8E	; 142
 9fc:	87 2f       	mov	r24, r23
 9fe:	76 2f       	mov	r23, r22
 a00:	05 c0       	rjmp	.+10     	; 0xa0c <__floatsisf+0x5e>
 a02:	66 23       	and	r22, r22
 a04:	71 f0       	breq	.+28     	; 0xa22 <__floatsisf+0x74>
 a06:	96 e8       	ldi	r25, 0x86	; 134
 a08:	86 2f       	mov	r24, r22
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	2a f0       	brmi	.+10     	; 0xa1a <__floatsisf+0x6c>
 a10:	9a 95       	dec	r25
 a12:	66 0f       	add	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	da f7       	brpl	.-10     	; 0xa10 <__floatsisf+0x62>
 a1a:	88 0f       	add	r24, r24
 a1c:	96 95       	lsr	r25
 a1e:	87 95       	ror	r24
 a20:	97 f9       	bld	r25, 7
 a22:	08 95       	ret

00000a24 <__fp_inf>:
 a24:	97 f9       	bld	r25, 7
 a26:	9f 67       	ori	r25, 0x7F	; 127
 a28:	80 e8       	ldi	r24, 0x80	; 128
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	60 e0       	ldi	r22, 0x00	; 0
 a2e:	08 95       	ret

00000a30 <__fp_nan>:
 a30:	9f ef       	ldi	r25, 0xFF	; 255
 a32:	80 ec       	ldi	r24, 0xC0	; 192
 a34:	08 95       	ret

00000a36 <__fp_pscA>:
 a36:	00 24       	eor	r0, r0
 a38:	0a 94       	dec	r0
 a3a:	16 16       	cp	r1, r22
 a3c:	17 06       	cpc	r1, r23
 a3e:	18 06       	cpc	r1, r24
 a40:	09 06       	cpc	r0, r25
 a42:	08 95       	ret

00000a44 <__fp_pscB>:
 a44:	00 24       	eor	r0, r0
 a46:	0a 94       	dec	r0
 a48:	12 16       	cp	r1, r18
 a4a:	13 06       	cpc	r1, r19
 a4c:	14 06       	cpc	r1, r20
 a4e:	05 06       	cpc	r0, r21
 a50:	08 95       	ret

00000a52 <__fp_round>:
 a52:	09 2e       	mov	r0, r25
 a54:	03 94       	inc	r0
 a56:	00 0c       	add	r0, r0
 a58:	11 f4       	brne	.+4      	; 0xa5e <__fp_round+0xc>
 a5a:	88 23       	and	r24, r24
 a5c:	52 f0       	brmi	.+20     	; 0xa72 <__fp_round+0x20>
 a5e:	bb 0f       	add	r27, r27
 a60:	40 f4       	brcc	.+16     	; 0xa72 <__fp_round+0x20>
 a62:	bf 2b       	or	r27, r31
 a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0x18>
 a66:	60 ff       	sbrs	r22, 0
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <__fp_round+0x20>
 a6a:	6f 5f       	subi	r22, 0xFF	; 255
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__fp_split3>:
 a74:	57 fd       	sbrc	r21, 7
 a76:	90 58       	subi	r25, 0x80	; 128
 a78:	44 0f       	add	r20, r20
 a7a:	55 1f       	adc	r21, r21
 a7c:	59 f0       	breq	.+22     	; 0xa94 <__fp_splitA+0x10>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	71 f0       	breq	.+28     	; 0xa9e <__fp_splitA+0x1a>
 a82:	47 95       	ror	r20

00000a84 <__fp_splitA>:
 a84:	88 0f       	add	r24, r24
 a86:	97 fb       	bst	r25, 7
 a88:	99 1f       	adc	r25, r25
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <__fp_splitA+0x20>
 a8c:	9f 3f       	cpi	r25, 0xFF	; 255
 a8e:	79 f0       	breq	.+30     	; 0xaae <__fp_splitA+0x2a>
 a90:	87 95       	ror	r24
 a92:	08 95       	ret
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	55 1f       	adc	r21, r21
 a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <__fp_split3+0xe>
 a9e:	46 95       	lsr	r20
 aa0:	f1 df       	rcall	.-30     	; 0xa84 <__fp_splitA>
 aa2:	08 c0       	rjmp	.+16     	; 0xab4 <__fp_splitA+0x30>
 aa4:	16 16       	cp	r1, r22
 aa6:	17 06       	cpc	r1, r23
 aa8:	18 06       	cpc	r1, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	f1 cf       	rjmp	.-30     	; 0xa90 <__fp_splitA+0xc>
 aae:	86 95       	lsr	r24
 ab0:	71 05       	cpc	r23, r1
 ab2:	61 05       	cpc	r22, r1
 ab4:	08 94       	sec
 ab6:	08 95       	ret

00000ab8 <__fp_zero>:
 ab8:	e8 94       	clt

00000aba <__fp_szero>:
 aba:	bb 27       	eor	r27, r27
 abc:	66 27       	eor	r22, r22
 abe:	77 27       	eor	r23, r23
 ac0:	cb 01       	movw	r24, r22
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret

00000ac6 <__mulsf3>:
 ac6:	0b d0       	rcall	.+22     	; 0xade <__mulsf3x>
 ac8:	c4 cf       	rjmp	.-120    	; 0xa52 <__fp_round>
 aca:	b5 df       	rcall	.-150    	; 0xa36 <__fp_pscA>
 acc:	28 f0       	brcs	.+10     	; 0xad8 <__mulsf3+0x12>
 ace:	ba df       	rcall	.-140    	; 0xa44 <__fp_pscB>
 ad0:	18 f0       	brcs	.+6      	; 0xad8 <__mulsf3+0x12>
 ad2:	95 23       	and	r25, r21
 ad4:	09 f0       	breq	.+2      	; 0xad8 <__mulsf3+0x12>
 ad6:	a6 cf       	rjmp	.-180    	; 0xa24 <__fp_inf>
 ad8:	ab cf       	rjmp	.-170    	; 0xa30 <__fp_nan>
 ada:	11 24       	eor	r1, r1
 adc:	ee cf       	rjmp	.-36     	; 0xaba <__fp_szero>

00000ade <__mulsf3x>:
 ade:	ca df       	rcall	.-108    	; 0xa74 <__fp_split3>
 ae0:	a0 f3       	brcs	.-24     	; 0xaca <__mulsf3+0x4>

00000ae2 <__mulsf3_pse>:
 ae2:	95 9f       	mul	r25, r21
 ae4:	d1 f3       	breq	.-12     	; 0xada <__mulsf3+0x14>
 ae6:	95 0f       	add	r25, r21
 ae8:	50 e0       	ldi	r21, 0x00	; 0
 aea:	55 1f       	adc	r21, r21
 aec:	62 9f       	mul	r22, r18
 aee:	f0 01       	movw	r30, r0
 af0:	72 9f       	mul	r23, r18
 af2:	bb 27       	eor	r27, r27
 af4:	f0 0d       	add	r31, r0
 af6:	b1 1d       	adc	r27, r1
 af8:	63 9f       	mul	r22, r19
 afa:	aa 27       	eor	r26, r26
 afc:	f0 0d       	add	r31, r0
 afe:	b1 1d       	adc	r27, r1
 b00:	aa 1f       	adc	r26, r26
 b02:	64 9f       	mul	r22, r20
 b04:	66 27       	eor	r22, r22
 b06:	b0 0d       	add	r27, r0
 b08:	a1 1d       	adc	r26, r1
 b0a:	66 1f       	adc	r22, r22
 b0c:	82 9f       	mul	r24, r18
 b0e:	22 27       	eor	r18, r18
 b10:	b0 0d       	add	r27, r0
 b12:	a1 1d       	adc	r26, r1
 b14:	62 1f       	adc	r22, r18
 b16:	73 9f       	mul	r23, r19
 b18:	b0 0d       	add	r27, r0
 b1a:	a1 1d       	adc	r26, r1
 b1c:	62 1f       	adc	r22, r18
 b1e:	83 9f       	mul	r24, r19
 b20:	a0 0d       	add	r26, r0
 b22:	61 1d       	adc	r22, r1
 b24:	22 1f       	adc	r18, r18
 b26:	74 9f       	mul	r23, r20
 b28:	33 27       	eor	r19, r19
 b2a:	a0 0d       	add	r26, r0
 b2c:	61 1d       	adc	r22, r1
 b2e:	23 1f       	adc	r18, r19
 b30:	84 9f       	mul	r24, r20
 b32:	60 0d       	add	r22, r0
 b34:	21 1d       	adc	r18, r1
 b36:	82 2f       	mov	r24, r18
 b38:	76 2f       	mov	r23, r22
 b3a:	6a 2f       	mov	r22, r26
 b3c:	11 24       	eor	r1, r1
 b3e:	9f 57       	subi	r25, 0x7F	; 127
 b40:	50 40       	sbci	r21, 0x00	; 0
 b42:	8a f0       	brmi	.+34     	; 0xb66 <__mulsf3_pse+0x84>
 b44:	e1 f0       	breq	.+56     	; 0xb7e <__mulsf3_pse+0x9c>
 b46:	88 23       	and	r24, r24
 b48:	4a f0       	brmi	.+18     	; 0xb5c <__mulsf3_pse+0x7a>
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	bb 1f       	adc	r27, r27
 b50:	66 1f       	adc	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	91 50       	subi	r25, 0x01	; 1
 b58:	50 40       	sbci	r21, 0x00	; 0
 b5a:	a9 f7       	brne	.-22     	; 0xb46 <__mulsf3_pse+0x64>
 b5c:	9e 3f       	cpi	r25, 0xFE	; 254
 b5e:	51 05       	cpc	r21, r1
 b60:	70 f0       	brcs	.+28     	; 0xb7e <__mulsf3_pse+0x9c>
 b62:	60 cf       	rjmp	.-320    	; 0xa24 <__fp_inf>
 b64:	aa cf       	rjmp	.-172    	; 0xaba <__fp_szero>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	ec f3       	brlt	.-6      	; 0xb64 <__mulsf3_pse+0x82>
 b6a:	98 3e       	cpi	r25, 0xE8	; 232
 b6c:	dc f3       	brlt	.-10     	; 0xb64 <__mulsf3_pse+0x82>
 b6e:	86 95       	lsr	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	b7 95       	ror	r27
 b76:	f7 95       	ror	r31
 b78:	e7 95       	ror	r30
 b7a:	9f 5f       	subi	r25, 0xFF	; 255
 b7c:	c1 f7       	brne	.-16     	; 0xb6e <__mulsf3_pse+0x8c>
 b7e:	fe 2b       	or	r31, r30
 b80:	88 0f       	add	r24, r24
 b82:	91 1d       	adc	r25, r1
 b84:	96 95       	lsr	r25
 b86:	87 95       	ror	r24
 b88:	97 f9       	bld	r25, 7
 b8a:	08 95       	ret

00000b8c <__udivmodhi4>:
 b8c:	aa 1b       	sub	r26, r26
 b8e:	bb 1b       	sub	r27, r27
 b90:	51 e1       	ldi	r21, 0x11	; 17
 b92:	07 c0       	rjmp	.+14     	; 0xba2 <__udivmodhi4_ep>

00000b94 <__udivmodhi4_loop>:
 b94:	aa 1f       	adc	r26, r26
 b96:	bb 1f       	adc	r27, r27
 b98:	a6 17       	cp	r26, r22
 b9a:	b7 07       	cpc	r27, r23
 b9c:	10 f0       	brcs	.+4      	; 0xba2 <__udivmodhi4_ep>
 b9e:	a6 1b       	sub	r26, r22
 ba0:	b7 0b       	sbc	r27, r23

00000ba2 <__udivmodhi4_ep>:
 ba2:	88 1f       	adc	r24, r24
 ba4:	99 1f       	adc	r25, r25
 ba6:	5a 95       	dec	r21
 ba8:	a9 f7       	brne	.-22     	; 0xb94 <__udivmodhi4_loop>
 baa:	80 95       	com	r24
 bac:	90 95       	com	r25
 bae:	bc 01       	movw	r22, r24
 bb0:	cd 01       	movw	r24, r26
 bb2:	08 95       	ret

00000bb4 <_exit>:
 bb4:	f8 94       	cli

00000bb6 <__stop_program>:
 bb6:	ff cf       	rjmp	.-2      	; 0xbb6 <__stop_program>
