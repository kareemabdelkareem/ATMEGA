
i2c_play.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000070a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000070a  0000077e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097b  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c5  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000481  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000757  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 02 	call	0x558	; 0x558 <main>
  8a:	0c 94 83 03 	jmp	0x706	; 0x706 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
DIO_voidSetPinDirection(PORTA,PIN0,OUTPUT); (DDRA,0) = 1;
*/
void		DIO_voidSetPinDirection(u8 PortID ,u8 PinID ,u8 Direction )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
  96:	87 c0       	rjmp	.+270    	; 0x1a6 <DIO_voidSetPinDirection+0x114>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
  9c:	84 c0       	rjmp	.+264    	; 0x1a6 <DIO_voidSetPinDirection+0x114>
	{
		if(Direction == OUTPUT)
  9e:	41 30       	cpi	r20, 0x01	; 1
  a0:	09 f0       	breq	.+2      	; 0xa4 <DIO_voidSetPinDirection+0x12>
  a2:	3e c0       	rjmp	.+124    	; 0x120 <DIO_voidSetPinDirection+0x8e>
		{
			switch(PortID)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	a9 f0       	breq	.+42     	; 0xd2 <DIO_voidSetPinDirection+0x40>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_voidSetPinDirection+0x26>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	f1 f0       	breq	.+60     	; 0xec <DIO_voidSetPinDirection+0x5a>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_voidSetPinDirection+0x24>
  b4:	78 c0       	rjmp	.+240    	; 0x1a6 <DIO_voidSetPinDirection+0x114>
  b6:	27 c0       	rjmp	.+78     	; 0x106 <DIO_voidSetPinDirection+0x74>
			{
				case PORTA :	SET_BIT(DDRA_REG,PinID);	break;
  b8:	2a b3       	in	r18, 0x1a	; 26
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	ac 01       	movw	r20, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_voidSetPinDirection+0x34>
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_voidSetPinDirection+0x30>
  ca:	ba 01       	movw	r22, r20
  cc:	62 2b       	or	r22, r18
  ce:	6a bb       	out	0x1a, r22	; 26
  d0:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,PinID);	break;
  d2:	27 b3       	in	r18, 0x17	; 23
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	ac 01       	movw	r20, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_voidSetPinDirection+0x4e>
  dc:	44 0f       	add	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_voidSetPinDirection+0x4a>
  e4:	ba 01       	movw	r22, r20
  e6:	62 2b       	or	r22, r18
  e8:	67 bb       	out	0x17, r22	; 23
  ea:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,PinID);	break;
  ec:	24 b3       	in	r18, 0x14	; 20
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	ac 01       	movw	r20, r24
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinDirection+0x68>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinDirection+0x64>
  fe:	ba 01       	movw	r22, r20
 100:	62 2b       	or	r22, r18
 102:	64 bb       	out	0x14, r22	; 20
 104:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,PinID);	break;
 106:	21 b3       	in	r18, 0x11	; 17
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	ac 01       	movw	r20, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinDirection+0x82>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinDirection+0x7e>
 118:	ba 01       	movw	r22, r20
 11a:	62 2b       	or	r22, r18
 11c:	61 bb       	out	0x11, r22	; 17
 11e:	08 95       	ret
			}
		}else if(Direction == INPUT)
 120:	44 23       	and	r20, r20
 122:	09 f0       	breq	.+2      	; 0x126 <DIO_voidSetPinDirection+0x94>
 124:	40 c0       	rjmp	.+128    	; 0x1a6 <DIO_voidSetPinDirection+0x114>
		{
			switch(PortID)
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	a9 f0       	breq	.+42     	; 0x154 <DIO_voidSetPinDirection+0xc2>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	28 f0       	brcs	.+10     	; 0x138 <DIO_voidSetPinDirection+0xa6>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	f9 f0       	breq	.+62     	; 0x170 <DIO_voidSetPinDirection+0xde>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	c1 f5       	brne	.+112    	; 0x1a6 <DIO_voidSetPinDirection+0x114>
 136:	2a c0       	rjmp	.+84     	; 0x18c <DIO_voidSetPinDirection+0xfa>
			{
				case PORTA :	CLR_BIT(DDRA_REG,PinID);	break;
 138:	2a b3       	in	r18, 0x1a	; 26
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	ac 01       	movw	r20, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_voidSetPinDirection+0xb4>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_voidSetPinDirection+0xb0>
 14a:	ba 01       	movw	r22, r20
 14c:	60 95       	com	r22
 14e:	62 23       	and	r22, r18
 150:	6a bb       	out	0x1a, r22	; 26
 152:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,PinID);	break;
 154:	27 b3       	in	r18, 0x17	; 23
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinDirection+0xd0>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinDirection+0xcc>
 166:	ba 01       	movw	r22, r20
 168:	60 95       	com	r22
 16a:	62 23       	and	r22, r18
 16c:	67 bb       	out	0x17, r22	; 23
 16e:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,PinID);	break;
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_voidSetPinDirection+0xec>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_voidSetPinDirection+0xe8>
 182:	ba 01       	movw	r22, r20
 184:	60 95       	com	r22
 186:	62 23       	and	r22, r18
 188:	64 bb       	out	0x14, r22	; 20
 18a:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,PinID);	break;
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_voidSetPinDirection+0x108>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_voidSetPinDirection+0x104>
 19e:	ba 01       	movw	r22, r20
 1a0:	60 95       	com	r22
 1a2:	62 23       	and	r22, r18
 1a4:	61 bb       	out	0x11, r22	; 17
 1a6:	08 95       	ret

000001a8 <DIO_voidSetPinValue>:
DIO_voidSetPinValue(PORTA,PIN0,HIGH); (PORTA,0) = 1;
*/
void		DIO_voidSetPinValue(u8 PortID ,u8 PinID ,u8 Value )
{
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <DIO_voidSetPinValue+0x6>
 1ac:	87 c0       	rjmp	.+270    	; 0x2bc <DIO_voidSetPinValue+0x114>
 1ae:	68 30       	cpi	r22, 0x08	; 8
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <DIO_voidSetPinValue+0xc>
 1b2:	84 c0       	rjmp	.+264    	; 0x2bc <DIO_voidSetPinValue+0x114>
	{
		if(Value == HIGH)
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <DIO_voidSetPinValue+0x12>
 1b8:	3e c0       	rjmp	.+124    	; 0x236 <DIO_voidSetPinValue+0x8e>
		{
			switch(PortID)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	a9 f0       	breq	.+42     	; 0x1e8 <DIO_voidSetPinValue+0x40>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	30 f0       	brcs	.+12     	; 0x1ce <DIO_voidSetPinValue+0x26>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	f1 f0       	breq	.+60     	; 0x202 <DIO_voidSetPinValue+0x5a>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	09 f0       	breq	.+2      	; 0x1cc <DIO_voidSetPinValue+0x24>
 1ca:	78 c0       	rjmp	.+240    	; 0x2bc <DIO_voidSetPinValue+0x114>
 1cc:	27 c0       	rjmp	.+78     	; 0x21c <DIO_voidSetPinValue+0x74>
			{
				case PORTA :	SET_BIT(PORTA_REG,PinID);	break;
 1ce:	2b b3       	in	r18, 0x1b	; 27
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	ac 01       	movw	r20, r24
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x34>
 1d8:	44 0f       	add	r20, r20
 1da:	55 1f       	adc	r21, r21
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x30>
 1e0:	ba 01       	movw	r22, r20
 1e2:	62 2b       	or	r22, r18
 1e4:	6b bb       	out	0x1b, r22	; 27
 1e6:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,PinID);	break;
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	ac 01       	movw	r20, r24
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_voidSetPinValue+0x4e>
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_voidSetPinValue+0x4a>
 1fa:	ba 01       	movw	r22, r20
 1fc:	62 2b       	or	r22, r18
 1fe:	68 bb       	out	0x18, r22	; 24
 200:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,PinID);	break;
 202:	25 b3       	in	r18, 0x15	; 21
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	ac 01       	movw	r20, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_voidSetPinValue+0x68>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_voidSetPinValue+0x64>
 214:	ba 01       	movw	r22, r20
 216:	62 2b       	or	r22, r18
 218:	65 bb       	out	0x15, r22	; 21
 21a:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,PinID);	break;
 21c:	22 b3       	in	r18, 0x12	; 18
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinValue+0x82>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinValue+0x7e>
 22e:	ba 01       	movw	r22, r20
 230:	62 2b       	or	r22, r18
 232:	62 bb       	out	0x12, r22	; 18
 234:	08 95       	ret
			}
		}else if(Value == LOW)
 236:	44 23       	and	r20, r20
 238:	09 f0       	breq	.+2      	; 0x23c <DIO_voidSetPinValue+0x94>
 23a:	40 c0       	rjmp	.+128    	; 0x2bc <DIO_voidSetPinValue+0x114>
		{
			switch(PortID)
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	a9 f0       	breq	.+42     	; 0x26a <DIO_voidSetPinValue+0xc2>
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	28 f0       	brcs	.+10     	; 0x24e <DIO_voidSetPinValue+0xa6>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	f9 f0       	breq	.+62     	; 0x286 <DIO_voidSetPinValue+0xde>
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	c1 f5       	brne	.+112    	; 0x2bc <DIO_voidSetPinValue+0x114>
 24c:	2a c0       	rjmp	.+84     	; 0x2a2 <DIO_voidSetPinValue+0xfa>
			{
				case PORTA :	CLR_BIT(PORTA_REG,PinID);	break;
 24e:	2b b3       	in	r18, 0x1b	; 27
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_voidSetPinValue+0xb4>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_voidSetPinValue+0xb0>
 260:	ba 01       	movw	r22, r20
 262:	60 95       	com	r22
 264:	62 23       	and	r22, r18
 266:	6b bb       	out	0x1b, r22	; 27
 268:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,PinID);	break;
 26a:	28 b3       	in	r18, 0x18	; 24
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	ac 01       	movw	r20, r24
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_voidSetPinValue+0xd0>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_voidSetPinValue+0xcc>
 27c:	ba 01       	movw	r22, r20
 27e:	60 95       	com	r22
 280:	62 23       	and	r22, r18
 282:	68 bb       	out	0x18, r22	; 24
 284:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,PinID);	break;
 286:	25 b3       	in	r18, 0x15	; 21
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_voidSetPinValue+0xec>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_voidSetPinValue+0xe8>
 298:	ba 01       	movw	r22, r20
 29a:	60 95       	com	r22
 29c:	62 23       	and	r22, r18
 29e:	65 bb       	out	0x15, r22	; 21
 2a0:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,PinID);	break;
 2a2:	22 b3       	in	r18, 0x12	; 18
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	ac 01       	movw	r20, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPinValue+0x108>
 2ac:	44 0f       	add	r20, r20
 2ae:	55 1f       	adc	r21, r21
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPinValue+0x104>
 2b4:	ba 01       	movw	r22, r20
 2b6:	60 95       	com	r22
 2b8:	62 23       	and	r22, r18
 2ba:	62 bb       	out	0x12, r22	; 18
 2bc:	08 95       	ret

000002be <DIO_u8GetPinValue>:

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
	/*		Range Check									*/
	if(PortID < 4 && PinID < 8)
 2be:	84 30       	cpi	r24, 0x04	; 4
 2c0:	98 f5       	brcc	.+102    	; 0x328 <DIO_u8GetPinValue+0x6a>
 2c2:	68 30       	cpi	r22, 0x08	; 8
 2c4:	98 f5       	brcc	.+102    	; 0x32c <DIO_u8GetPinValue+0x6e>
	{
		switch(PortID)
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	89 f0       	breq	.+34     	; 0x2ec <DIO_u8GetPinValue+0x2e>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	28 f0       	brcs	.+10     	; 0x2d8 <DIO_u8GetPinValue+0x1a>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	b9 f0       	breq	.+46     	; 0x300 <DIO_u8GetPinValue+0x42>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	69 f5       	brne	.+90     	; 0x330 <DIO_u8GetPinValue+0x72>
 2d6:	1e c0       	rjmp	.+60     	; 0x314 <DIO_u8GetPinValue+0x56>
		{
			case PORTA :	Local_u8Value	=	GET_BIT(PINA_REG,PinID);	break;
 2d8:	29 b3       	in	r18, 0x19	; 25
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	c9 01       	movw	r24, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8GetPinValue+0x26>
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_u8GetPinValue+0x22>
 2e8:	81 70       	andi	r24, 0x01	; 1
 2ea:	08 95       	ret
			case PORTB :	Local_u8Value	=	GET_BIT(PINB_REG,PinID);	break;
 2ec:	26 b3       	in	r18, 0x16	; 22
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	c9 01       	movw	r24, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_u8GetPinValue+0x3a>
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_u8GetPinValue+0x36>
 2fc:	81 70       	andi	r24, 0x01	; 1
 2fe:	08 95       	ret
			case PORTC :	Local_u8Value	=	GET_BIT(PINC_REG,PinID);	break;
 300:	23 b3       	in	r18, 0x13	; 19
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	c9 01       	movw	r24, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_u8GetPinValue+0x4e>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_u8GetPinValue+0x4a>
 310:	81 70       	andi	r24, 0x01	; 1
 312:	08 95       	ret
			case PORTD :	Local_u8Value	=	GET_BIT(PIND_REG,PinID);	break;
 314:	20 b3       	in	r18, 0x10	; 16
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	c9 01       	movw	r24, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8GetPinValue+0x62>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8GetPinValue+0x5e>
 324:	81 70       	andi	r24, 0x01	; 1
 326:	08 95       	ret
u8 x = DIO_voidGetPinValue(PORTA,PIN0); GET(PINA,0)
*/

u8			DIO_u8GetPinValue(u8 PortID ,u8 PinID )
{
	u8 Local_u8Value = 0xFF ;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	08 95       	ret
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	08 95       	ret
 330:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		/*	Return Error 								*/
	}
	return Local_u8Value ;
}
 332:	08 95       	ret

00000334 <DIO_voidSetPortDirection>:
DIO_voidSetPortDirection(PORTA,OUTPUT); (DDRA) = 0xFF;
*/
void		DIO_voidSetPortDirection(u8 PortID ,u8 Direction )
{
	/*		Range Check									*/
	if(PortID < 4 )
 334:	84 30       	cpi	r24, 0x04	; 4
 336:	48 f5       	brcc	.+82     	; 0x38a <DIO_voidSetPortDirection+0x56>
	{
		if(Direction == OUTPUT)
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	a9 f4       	brne	.+42     	; 0x366 <DIO_voidSetPortDirection+0x32>
		{
			switch(PortID)
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	51 f0       	breq	.+20     	; 0x354 <DIO_voidSetPortDirection+0x20>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	28 f0       	brcs	.+10     	; 0x34e <DIO_voidSetPortDirection+0x1a>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	49 f0       	breq	.+18     	; 0x35a <DIO_voidSetPortDirection+0x26>
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	f9 f4       	brne	.+62     	; 0x38a <DIO_voidSetPortDirection+0x56>
 34c:	09 c0       	rjmp	.+18     	; 0x360 <DIO_voidSetPortDirection+0x2c>
			{
				case PORTA :	SET_PORT(DDRA_REG);	break;
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	8a bb       	out	0x1a, r24	; 26
 352:	08 95       	ret
				case PORTB :	SET_PORT(DDRB_REG);	break;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	87 bb       	out	0x17, r24	; 23
 358:	08 95       	ret
				case PORTC :	SET_PORT(DDRC_REG);	break;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	84 bb       	out	0x14, r24	; 20
 35e:	08 95       	ret
				case PORTD :	SET_PORT(DDRD_REG);	break;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	81 bb       	out	0x11, r24	; 17
 364:	08 95       	ret
			}
		}else if(Direction == INPUT)
 366:	66 23       	and	r22, r22
 368:	81 f4       	brne	.+32     	; 0x38a <DIO_voidSetPortDirection+0x56>
		{
			switch(PortID)
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	49 f0       	breq	.+18     	; 0x380 <DIO_voidSetPortDirection+0x4c>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	28 f0       	brcs	.+10     	; 0x37c <DIO_voidSetPortDirection+0x48>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	39 f0       	breq	.+14     	; 0x384 <DIO_voidSetPortDirection+0x50>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	41 f4       	brne	.+16     	; 0x38a <DIO_voidSetPortDirection+0x56>
 37a:	06 c0       	rjmp	.+12     	; 0x388 <DIO_voidSetPortDirection+0x54>
			{
				case PORTA :	CLR_PORT(DDRA_REG);	break;
 37c:	1a ba       	out	0x1a, r1	; 26
 37e:	08 95       	ret
				case PORTB :	CLR_PORT(DDRB_REG);	break;
 380:	17 ba       	out	0x17, r1	; 23
 382:	08 95       	ret
				case PORTC :	CLR_PORT(DDRC_REG);	break;
 384:	14 ba       	out	0x14, r1	; 20
 386:	08 95       	ret
				case PORTD :	CLR_PORT(DDRD_REG);	break;
 388:	11 ba       	out	0x11, r1	; 17
 38a:	08 95       	ret

0000038c <DIO_voidSetPortValue>:
/*
DIO_voidSetPortValue(PORTA,0x58); (PORTA) = ox58;
*/
void		DIO_voidSetPortValue(u8 PortID ,u8 Value )
{
	if(PortID < 4 )
 38c:	84 30       	cpi	r24, 0x04	; 4
 38e:	80 f4       	brcc	.+32     	; 0x3b0 <DIO_voidSetPortValue+0x24>
	{
		
		switch(PortID)
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	49 f0       	breq	.+18     	; 0x3a6 <DIO_voidSetPortValue+0x1a>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	28 f0       	brcs	.+10     	; 0x3a2 <DIO_voidSetPortValue+0x16>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	39 f0       	breq	.+14     	; 0x3aa <DIO_voidSetPortValue+0x1e>
 39c:	83 30       	cpi	r24, 0x03	; 3
 39e:	41 f4       	brne	.+16     	; 0x3b0 <DIO_voidSetPortValue+0x24>
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <DIO_voidSetPortValue+0x22>
		{
			case PORTA :	ASG_PORT(PORTA_REG,Value);	break;
 3a2:	6b bb       	out	0x1b, r22	; 27
 3a4:	08 95       	ret
			case PORTB :	ASG_PORT(PORTB_REG,Value);	break;
 3a6:	68 bb       	out	0x18, r22	; 24
 3a8:	08 95       	ret
			case PORTC :	ASG_PORT(PORTC_REG,Value);	break;
 3aa:	65 bb       	out	0x15, r22	; 21
 3ac:	08 95       	ret
			case PORTD :	ASG_PORT(PORTD_REG,Value);	break;
 3ae:	62 bb       	out	0x12, r22	; 18
 3b0:	08 95       	ret

000003b2 <DIO_voidSetNibbleDirection>:
/*
DIO_voidSetNibbleDirection (PORTA,HIGH,HIGH); (DDRA_REG) = 0xF0;
*/
void		DIO_voidSetNibbleDirection(u8 PortID ,u8 NibbleCase , u8 Direction )
{
	if(PortID < 4 && NibbleCase < 2 )
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <DIO_voidSetNibbleDirection+0x6>
 3b6:	8c c0       	rjmp	.+280    	; 0x4d0 <DIO_voidSetNibbleDirection+0x11e>
 3b8:	62 30       	cpi	r22, 0x02	; 2
 3ba:	08 f0       	brcs	.+2      	; 0x3be <DIO_voidSetNibbleDirection+0xc>
 3bc:	89 c0       	rjmp	.+274    	; 0x4d0 <DIO_voidSetNibbleDirection+0x11e>
	{
		if(Direction == OUTPUT)
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <DIO_voidSetNibbleDirection+0x12>
 3c2:	42 c0       	rjmp	.+132    	; 0x448 <DIO_voidSetNibbleDirection+0x96>
		{
			switch(PortID)
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	b1 f0       	breq	.+44     	; 0x3f4 <DIO_voidSetNibbleDirection+0x42>
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	30 f0       	brcs	.+12     	; 0x3d8 <DIO_voidSetNibbleDirection+0x26>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	01 f1       	breq	.+64     	; 0x410 <DIO_voidSetNibbleDirection+0x5e>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <DIO_voidSetNibbleDirection+0x24>
 3d4:	7d c0       	rjmp	.+250    	; 0x4d0 <DIO_voidSetNibbleDirection+0x11e>
 3d6:	2a c0       	rjmp	.+84     	; 0x42c <DIO_voidSetNibbleDirection+0x7a>
			{
				case PORTA :	SET_NIBBLE(DDRA_REG,NibbleCase);	break;
 3d8:	4a b3       	in	r20, 0x1a	; 26
 3da:	66 0f       	add	r22, r22
 3dc:	66 0f       	add	r22, r22
 3de:	2f e0       	ldi	r18, 0x0F	; 15
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	c9 01       	movw	r24, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_voidSetNibbleDirection+0x38>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_voidSetNibbleDirection+0x34>
 3ee:	84 2b       	or	r24, r20
 3f0:	8a bb       	out	0x1a, r24	; 26
 3f2:	08 95       	ret
				case PORTB :	SET_NIBBLE(DDRB_REG,NibbleCase);	break;
 3f4:	47 b3       	in	r20, 0x17	; 23
 3f6:	66 0f       	add	r22, r22
 3f8:	66 0f       	add	r22, r22
 3fa:	2f e0       	ldi	r18, 0x0F	; 15
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	c9 01       	movw	r24, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_voidSetNibbleDirection+0x54>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_voidSetNibbleDirection+0x50>
 40a:	84 2b       	or	r24, r20
 40c:	87 bb       	out	0x17, r24	; 23
 40e:	08 95       	ret
				case PORTC :	SET_NIBBLE(DDRC_REG,NibbleCase);	break;
 410:	44 b3       	in	r20, 0x14	; 20
 412:	66 0f       	add	r22, r22
 414:	66 0f       	add	r22, r22
 416:	2f e0       	ldi	r18, 0x0F	; 15
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	c9 01       	movw	r24, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_voidSetNibbleDirection+0x70>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_voidSetNibbleDirection+0x6c>
 426:	84 2b       	or	r24, r20
 428:	84 bb       	out	0x14, r24	; 20
 42a:	08 95       	ret
				case PORTD :	SET_NIBBLE(DDRD_REG,NibbleCase);	break;
 42c:	41 b3       	in	r20, 0x11	; 17
 42e:	66 0f       	add	r22, r22
 430:	66 0f       	add	r22, r22
 432:	2f e0       	ldi	r18, 0x0F	; 15
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	c9 01       	movw	r24, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_voidSetNibbleDirection+0x8c>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_voidSetNibbleDirection+0x88>
 442:	84 2b       	or	r24, r20
 444:	81 bb       	out	0x11, r24	; 17
 446:	08 95       	ret
			}
			}else if (Direction == INPUT){
 448:	44 23       	and	r20, r20
 44a:	09 f0       	breq	.+2      	; 0x44e <DIO_voidSetNibbleDirection+0x9c>
 44c:	41 c0       	rjmp	.+130    	; 0x4d0 <DIO_voidSetNibbleDirection+0x11e>
			switch(PortID)
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	a9 f0       	breq	.+42     	; 0x47c <DIO_voidSetNibbleDirection+0xca>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	28 f0       	brcs	.+10     	; 0x460 <DIO_voidSetNibbleDirection+0xae>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	f9 f0       	breq	.+62     	; 0x498 <DIO_voidSetNibbleDirection+0xe6>
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	c9 f5       	brne	.+114    	; 0x4d0 <DIO_voidSetNibbleDirection+0x11e>
 45e:	2a c0       	rjmp	.+84     	; 0x4b4 <DIO_voidSetNibbleDirection+0x102>
			{
				case PORTA :	CLR_NIBBLE(DDRA_REG,NibbleCase);	break;
 460:	4a b3       	in	r20, 0x1a	; 26
 462:	66 0f       	add	r22, r22
 464:	66 0f       	add	r22, r22
 466:	20 ef       	ldi	r18, 0xF0	; 240
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	c9 01       	movw	r24, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_voidSetNibbleDirection+0xc0>
 46e:	95 95       	asr	r25
 470:	87 95       	ror	r24
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_voidSetNibbleDirection+0xbc>
 476:	84 23       	and	r24, r20
 478:	8a bb       	out	0x1a, r24	; 26
 47a:	08 95       	ret
				case PORTB :	CLR_NIBBLE(DDRB_REG,NibbleCase);	break;
 47c:	47 b3       	in	r20, 0x17	; 23
 47e:	66 0f       	add	r22, r22
 480:	66 0f       	add	r22, r22
 482:	20 ef       	ldi	r18, 0xF0	; 240
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	c9 01       	movw	r24, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_voidSetNibbleDirection+0xdc>
 48a:	95 95       	asr	r25
 48c:	87 95       	ror	r24
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_voidSetNibbleDirection+0xd8>
 492:	84 23       	and	r24, r20
 494:	87 bb       	out	0x17, r24	; 23
 496:	08 95       	ret
				case PORTC :	CLR_NIBBLE(DDRC_REG,NibbleCase);	break;
 498:	44 b3       	in	r20, 0x14	; 20
 49a:	66 0f       	add	r22, r22
 49c:	66 0f       	add	r22, r22
 49e:	20 ef       	ldi	r18, 0xF0	; 240
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	c9 01       	movw	r24, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_voidSetNibbleDirection+0xf8>
 4a6:	95 95       	asr	r25
 4a8:	87 95       	ror	r24
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_voidSetNibbleDirection+0xf4>
 4ae:	84 23       	and	r24, r20
 4b0:	84 bb       	out	0x14, r24	; 20
 4b2:	08 95       	ret
				case PORTD :	CLR_NIBBLE(DDRD_REG,NibbleCase);	break;
 4b4:	21 b3       	in	r18, 0x11	; 17
 4b6:	66 0f       	add	r22, r22
 4b8:	66 0f       	add	r22, r22
 4ba:	80 ef       	ldi	r24, 0xF0	; 240
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	ac 01       	movw	r20, r24
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_voidSetNibbleDirection+0x114>
 4c2:	55 95       	asr	r21
 4c4:	47 95       	ror	r20
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_voidSetNibbleDirection+0x110>
 4ca:	ba 01       	movw	r22, r20
 4cc:	62 23       	and	r22, r18
 4ce:	61 bb       	out	0x11, r22	; 17
 4d0:	08 95       	ret

000004d2 <DIO_voidSetNibbleValue>:
/*
DIO_voidSetNibbleValue (PORTA,HIGH,0x70); (PORTA_REG) = 0111 xxxx;
*/
void		DIO_voidSetNibbleValue(u8 PortID ,u8 NibbleCase , u8 Value )
{
	if(PortID < 4 && NibbleCase < 2 )
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	f0 f5       	brcc	.+124    	; 0x552 <DIO_voidSetNibbleValue+0x80>
 4d6:	62 30       	cpi	r22, 0x02	; 2
 4d8:	e0 f5       	brcc	.+120    	; 0x552 <DIO_voidSetNibbleValue+0x80>
	{
		switch(PortID)
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	a1 f0       	breq	.+40     	; 0x506 <DIO_voidSetNibbleValue+0x34>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	28 f0       	brcs	.+10     	; 0x4ec <DIO_voidSetNibbleValue+0x1a>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	e9 f0       	breq	.+58     	; 0x520 <DIO_voidSetNibbleValue+0x4e>
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	a1 f5       	brne	.+104    	; 0x552 <DIO_voidSetNibbleValue+0x80>
 4ea:	27 c0       	rjmp	.+78     	; 0x53a <DIO_voidSetNibbleValue+0x68>
		{
			case PORTA :	ASG_NIBBLE(PORTA_REG,NibbleCase,Value);	break;
 4ec:	66 23       	and	r22, r22
 4ee:	29 f4       	brne	.+10     	; 0x4fa <DIO_voidSetNibbleValue+0x28>
 4f0:	8b b3       	in	r24, 0x1b	; 27
 4f2:	4f 70       	andi	r20, 0x0F	; 15
 4f4:	80 7f       	andi	r24, 0xF0	; 240
 4f6:	48 2b       	or	r20, r24
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <DIO_voidSetNibbleValue+0x30>
 4fa:	8b b3       	in	r24, 0x1b	; 27
 4fc:	40 7f       	andi	r20, 0xF0	; 240
 4fe:	8f 70       	andi	r24, 0x0F	; 15
 500:	48 2b       	or	r20, r24
 502:	4b bb       	out	0x1b, r20	; 27
 504:	08 95       	ret
			case PORTB :	ASG_NIBBLE(PORTB_REG,NibbleCase,Value);	break;
 506:	66 23       	and	r22, r22
 508:	29 f4       	brne	.+10     	; 0x514 <DIO_voidSetNibbleValue+0x42>
 50a:	88 b3       	in	r24, 0x18	; 24
 50c:	4f 70       	andi	r20, 0x0F	; 15
 50e:	80 7f       	andi	r24, 0xF0	; 240
 510:	48 2b       	or	r20, r24
 512:	04 c0       	rjmp	.+8      	; 0x51c <DIO_voidSetNibbleValue+0x4a>
 514:	88 b3       	in	r24, 0x18	; 24
 516:	40 7f       	andi	r20, 0xF0	; 240
 518:	8f 70       	andi	r24, 0x0F	; 15
 51a:	48 2b       	or	r20, r24
 51c:	48 bb       	out	0x18, r20	; 24
 51e:	08 95       	ret
			case PORTC :	ASG_NIBBLE(PORTC_REG,NibbleCase,Value);	break;
 520:	66 23       	and	r22, r22
 522:	29 f4       	brne	.+10     	; 0x52e <DIO_voidSetNibbleValue+0x5c>
 524:	85 b3       	in	r24, 0x15	; 21
 526:	4f 70       	andi	r20, 0x0F	; 15
 528:	80 7f       	andi	r24, 0xF0	; 240
 52a:	48 2b       	or	r20, r24
 52c:	04 c0       	rjmp	.+8      	; 0x536 <DIO_voidSetNibbleValue+0x64>
 52e:	85 b3       	in	r24, 0x15	; 21
 530:	40 7f       	andi	r20, 0xF0	; 240
 532:	8f 70       	andi	r24, 0x0F	; 15
 534:	48 2b       	or	r20, r24
 536:	45 bb       	out	0x15, r20	; 21
 538:	08 95       	ret
			case PORTD :	ASG_NIBBLE(PORTD_REG,NibbleCase,Value);	break;
 53a:	66 23       	and	r22, r22
 53c:	29 f4       	brne	.+10     	; 0x548 <DIO_voidSetNibbleValue+0x76>
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	4f 70       	andi	r20, 0x0F	; 15
 542:	80 7f       	andi	r24, 0xF0	; 240
 544:	48 2b       	or	r20, r24
 546:	04 c0       	rjmp	.+8      	; 0x550 <DIO_voidSetNibbleValue+0x7e>
 548:	82 b3       	in	r24, 0x12	; 18
 54a:	40 7f       	andi	r20, 0xF0	; 240
 54c:	8f 70       	andi	r24, 0x0F	; 15
 54e:	48 2b       	or	r20, r24
 550:	42 bb       	out	0x12, r20	; 18
 552:	08 95       	ret

00000554 <I2C_MasterInit>:


void I2C_MasterInit(u8 addr)
{
	
}
 554:	08 95       	ret

00000556 <I2C_ReadStatus>:
boolean I2C_Send_SlaveAddressReadOperation(u8 addr);
u8 I2C_ReadByte(void);
u8 I2C_ReadStatus(void)
{
	return ;
 556:	08 95       	ret

00000558 <main>:



// slave code 
int main(void)
{
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	0f 92       	push	r0
 55e:	cd b7       	in	r28, 0x3d	; 61
 560:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPinDirection(PORTA,0,OUTPUT) ;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	u8 read  = 0 ;
 56c:	19 82       	std	Y+1, r1	; 0x01
	//I2C_Master_voidInit();
	I2C_Slave_voidInit(0x10) ;
 56e:	80 e1       	ldi	r24, 0x10	; 16
 570:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <I2C_Slave_voidInit>
	I2C_Error_State Error=I2C_OK;
	while (1)
	{
		//Error =I2C_Master_enuSendStartCond();
		I2C_Slave_voidListen();
 574:	0e 94 6e 03 	call	0x6dc	; 0x6dc <I2C_Slave_voidListen>
		Error=I2C_Slave_enuReadu8Data(&read) ;
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <I2C_Slave_enuReadu8Data>
 580:	18 2f       	mov	r17, r24
		//Error=I2C_Master_enuSendSlaveAddressWithWrite(0x10);
		
		if(read == 'b')   DIO_voidSetPinValue(PORTA,0,HIGH) ;
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	82 36       	cpi	r24, 0x62	; 98
 586:	29 f4       	brne	.+10     	; 0x592 <main+0x3a>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
		if(Error==I2C_OK)
 592:	11 23       	and	r17, r17
 594:	79 f7       	brne	.-34     	; 0x574 <main+0x1c>
		{
			Error=I2C_Master_enuSendu8Data('A');
 596:	81 e4       	ldi	r24, 0x41	; 65
 598:	0e 94 47 03 	call	0x68e	; 0x68e <I2C_Master_enuSendu8Data>
			
		}
		if(Error==I2C_OK && DIO_u8GetPinValue(PORTA,PIN0)==0)
 59c:	88 23       	and	r24, r24
 59e:	51 f7       	brne	.-44     	; 0x574 <main+0x1c>
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8GetPinValue>
 5a6:	88 23       	and	r24, r24
 5a8:	41 f4       	brne	.+16     	; 0x5ba <main+0x62>
		{
			Error=I2C_Master_enuSendu8Data('H');
 5aa:	88 e4       	ldi	r24, 0x48	; 72
 5ac:	0e 94 47 03 	call	0x68e	; 0x68e <I2C_Master_enuSendu8Data>
 5b0:	e1 cf       	rjmp	.-62     	; 0x574 <main+0x1c>
		}
		else if(Error==I2C_OK && DIO_u8GetPinValue(PORTA,PIN1)==0)
		{
			Error=I2C_Master_enuSendu8Data('L');
 5b2:	8c e4       	ldi	r24, 0x4C	; 76
 5b4:	0e 94 47 03 	call	0x68e	; 0x68e <I2C_Master_enuSendu8Data>
 5b8:	dd cf       	rjmp	.-70     	; 0x574 <main+0x1c>
		}
		if(Error==I2C_OK && DIO_u8GetPinValue(PORTA,PIN0)==0)
		{
			Error=I2C_Master_enuSendu8Data('H');
		}
		else if(Error==I2C_OK && DIO_u8GetPinValue(PORTA,PIN1)==0)
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8GetPinValue>
 5c2:	88 23       	and	r24, r24
 5c4:	b1 f3       	breq	.-20     	; 0x5b2 <main+0x5a>
 5c6:	d6 cf       	rjmp	.-84     	; 0x574 <main+0x1c>

000005c8 <I2C_Master_voidInit>:
#include		"I2C_private.h"
#include		"I2C_config.h"

void		I2C_Master_voidInit(void)
{
	TWBR_REG= I2C_TWBR_VALUE;
 5c8:	88 e4       	ldi	r24, 0x48	; 72
 5ca:	80 b9       	out	0x00, r24	; 0
	#if 		I2C_PRESCALER == I2C_PRESCALER_1
		CLR_BIT(TWSR_REG,TWPS0);
 5cc:	08 98       	cbi	0x01, 0	; 1
		CLR_BIT(TWSR_REG,TWPS1);
 5ce:	09 98       	cbi	0x01, 1	; 1
	#endif

	#if 		I2C_ACK_MODE == DISABLE
		CLR_BIT(TWCR_REG,TWEA);
	#elif 	I2C_ACK_MODE == ENABLE
		SET_BIT(TWCR_REG,TWEA);
 5d0:	86 b7       	in	r24, 0x36	; 54
 5d2:	80 64       	ori	r24, 0x40	; 64
 5d4:	86 bf       	out	0x36, r24	; 54
	#endif

	#if 		I2C_GENERAL_CALL_MODE == DISABLE
		CLR_BIT(TWAR_REG,TWGCE);
 5d6:	10 98       	cbi	0x02, 0	; 2
	#elif 	I2C_GENERAL_CALL_MODE == ENABLE
		SET_BIT(TWAR_REG,TWGCE);
	#endif

	SET_BIT(TWCR_REG,TWEN);
 5d8:	86 b7       	in	r24, 0x36	; 54
 5da:	84 60       	ori	r24, 0x04	; 4
 5dc:	86 bf       	out	0x36, r24	; 54
}
 5de:	08 95       	ret

000005e0 <I2C_Slave_voidInit>:

void		I2C_Slave_voidInit(u8 I2C_Address)
{
	TWBR_REG= I2C_TWBR_VALUE;
 5e0:	98 e4       	ldi	r25, 0x48	; 72
 5e2:	90 b9       	out	0x00, r25	; 0
	#if 		I2C_PRESCALER == I2C_PRESCALER_1
		CLR_BIT(TWSR_REG,TWPS0);
 5e4:	08 98       	cbi	0x01, 0	; 1
		CLR_BIT(TWSR_REG,TWPS1);
 5e6:	09 98       	cbi	0x01, 1	; 1
	#endif

	#if 		I2C_ACK_MODE == DISABLE
		CLR_BIT(TWCR_REG,TWEA);
	#elif 	I2C_ACK_MODE == ENABLE
		SET_BIT(TWCR_REG,TWEA);
 5e8:	96 b7       	in	r25, 0x36	; 54
 5ea:	90 64       	ori	r25, 0x40	; 64
 5ec:	96 bf       	out	0x36, r25	; 54
	#endif

	#if 		I2C_GENERAL_CALL_MODE == DISABLE
		CLR_BIT(TWAR_REG,TWGCE);
 5ee:	10 98       	cbi	0x02, 0	; 2
	#elif 	I2C_GENERAL_CALL_MODE == ENABLE
		SET_BIT(TWAR_REG,TWGCE);
	#endif

	SET_BIT(TWCR_REG,TWEN);
 5f0:	96 b7       	in	r25, 0x36	; 54
 5f2:	94 60       	ori	r25, 0x04	; 4
 5f4:	96 bf       	out	0x36, r25	; 54
	TWAR_REG=(I2C_Address<<1);
 5f6:	88 0f       	add	r24, r24
 5f8:	82 b9       	out	0x02, r24	; 2
}
 5fa:	08 95       	ret

000005fc <I2C_Master_enuSendStartCond>:

I2C_Error_State   I2C_Master_enuSendStartCond(void)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Send the start condition  */
	SET_BIT(TWCR_REG,TWSTA);
 5fc:	86 b7       	in	r24, 0x36	; 54
 5fe:	80 62       	ori	r24, 0x20	; 32
 600:	86 bf       	out	0x36, r24	; 54
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 602:	86 b7       	in	r24, 0x36	; 54
 604:	80 68       	ori	r24, 0x80	; 128
 606:	86 bf       	out	0x36, r24	; 54
	/*		Polling on the flag to confirm transmitting the start conditon */
	while (!(TWCR_REG &  (1<<TWINT)));
 608:	06 b6       	in	r0, 0x36	; 54
 60a:	07 fe       	sbrs	r0, 7
 60c:	fd cf       	rjmp	.-6      	; 0x608 <I2C_Master_enuSendStartCond+0xc>
	if ((TWSR_REG & 0xF8)!=I2C_SC_ACK)
 60e:	91 b1       	in	r25, 0x01	; 1
 610:	98 7f       	andi	r25, 0xF8	; 248
	TWAR_REG=(I2C_Address<<1);
}

I2C_Error_State   I2C_Master_enuSendStartCond(void)
{
	I2C_Error_State Local_enuError= I2C_OK;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	98 30       	cpi	r25, 0x08	; 8
 616:	09 f4       	brne	.+2      	; 0x61a <I2C_Master_enuSendStartCond+0x1e>
 618:	80 e0       	ldi	r24, 0x00	; 0
	if ((TWSR_REG & 0xF8)!=I2C_SC_ACK)
	{
		Local_enuError= I2C_SC_ERROR;
	}
	return Local_enuError;
}
 61a:	08 95       	ret

0000061c <I2C_Master_enuSendRepeatedStartCond>:

I2C_Error_State   I2C_Master_enuSendRepeatedStartCond(void)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Send the start condition  */
	SET_BIT(TWCR_REG,TWSTA);
 61c:	86 b7       	in	r24, 0x36	; 54
 61e:	80 62       	ori	r24, 0x20	; 32
 620:	86 bf       	out	0x36, r24	; 54
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 622:	86 b7       	in	r24, 0x36	; 54
 624:	80 68       	ori	r24, 0x80	; 128
 626:	86 bf       	out	0x36, r24	; 54
	/*		Polling on the flag to confirm transmitting the start conditon */
	while (!(TWCR_REG &  (1<<TWINT)));
 628:	06 b6       	in	r0, 0x36	; 54
 62a:	07 fe       	sbrs	r0, 7
 62c:	fd cf       	rjmp	.-6      	; 0x628 <I2C_Master_enuSendRepeatedStartCond+0xc>
	if ((TWSR_REG & 0xF8)!=I2C_RSC_ACK)
 62e:	81 b1       	in	r24, 0x01	; 1
 630:	88 7f       	andi	r24, 0xF8	; 248
 632:	80 31       	cpi	r24, 0x10	; 16
 634:	11 f4       	brne	.+4      	; 0x63a <I2C_Master_enuSendRepeatedStartCond+0x1e>
}


I2C_Error_State   I2C_Master_enuSendRepeatedStartCond(void)
{
	I2C_Error_State Local_enuError= I2C_OK;
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag to confirm transmitting the start conditon */
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_RSC_ACK)
	{
		Local_enuError= I2C_RSC_ERROR;
 63a:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Local_enuError;
}
 63c:	08 95       	ret

0000063e <I2C_Master_enuSendSlaveAddressWithRead>:

I2C_Error_State   I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Put Address to TWDR_REG  */
	TWDR_REG=(I2C_Address<<1);
 63e:	88 0f       	add	r24, r24
 640:	83 b9       	out	0x03, r24	; 3
	/*		Read Operation  */
	SET_BIT(TWDR_REG,0);
 642:	18 9a       	sbi	0x03, 0	; 3
	/*		CLR the start condition  */
	CLR_BIT(TWCR_REG,TWSTA);
 644:	86 b7       	in	r24, 0x36	; 54
 646:	8f 7d       	andi	r24, 0xDF	; 223
 648:	86 bf       	out	0x36, r24	; 54
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT); 
 64a:	86 b7       	in	r24, 0x36	; 54
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	86 bf       	out	0x36, r24	; 54
	/*		Polling on the flag */
	while (!(TWCR_REG &  (1<<TWINT)));
 650:	06 b6       	in	r0, 0x36	; 54
 652:	07 fe       	sbrs	r0, 7
 654:	fd cf       	rjmp	.-6      	; 0x650 <I2C_Master_enuSendSlaveAddressWithRead+0x12>
	if ((TWSR_REG & 0xF8)!=I2C_MT_SLA_R_ACK)
 656:	81 b1       	in	r24, 0x01	; 1
 658:	88 7f       	andi	r24, 0xF8	; 248
 65a:	80 34       	cpi	r24, 0x40	; 64
 65c:	11 f4       	brne	.+4      	; 0x662 <I2C_Master_enuSendSlaveAddressWithRead+0x24>
	return Local_enuError;
}

I2C_Error_State   I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address)
{
	I2C_Error_State Local_enuError= I2C_OK;
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT); 
	/*		Polling on the flag */
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_MT_SLA_R_ACK)
	{
		Local_enuError= I2C_MT_SLA_R_ERROR;
 662:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Local_enuError;
}
 664:	08 95       	ret

00000666 <I2C_Master_enuSendSlaveAddressWithWrite>:

I2C_Error_State   I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Put Address to TWDR_REG  */
	TWDR_REG=(I2C_Address<<1);
 666:	88 0f       	add	r24, r24
 668:	83 b9       	out	0x03, r24	; 3
	/*		Write Operation  */
	CLR_BIT(TWDR_REG,0);
 66a:	18 98       	cbi	0x03, 0	; 3
	/*		CLR the start condition  */
	CLR_BIT(TWCR_REG,TWSTA);
 66c:	86 b7       	in	r24, 0x36	; 54
 66e:	8f 7d       	andi	r24, 0xDF	; 223
 670:	86 bf       	out	0x36, r24	; 54
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 672:	86 b7       	in	r24, 0x36	; 54
 674:	80 68       	ori	r24, 0x80	; 128
 676:	86 bf       	out	0x36, r24	; 54
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 678:	06 b6       	in	r0, 0x36	; 54
 67a:	07 fe       	sbrs	r0, 7
 67c:	fd cf       	rjmp	.-6      	; 0x678 <I2C_Master_enuSendSlaveAddressWithWrite+0x12>
	if ((TWSR_REG & 0xF8)!=I2C_MT_SLA_W_ACK)
 67e:	81 b1       	in	r24, 0x01	; 1
 680:	88 7f       	andi	r24, 0xF8	; 248
 682:	88 31       	cpi	r24, 0x18	; 24
 684:	11 f4       	brne	.+4      	; 0x68a <I2C_Master_enuSendSlaveAddressWithWrite+0x24>
	return Local_enuError;
}

I2C_Error_State   I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address)
{
	I2C_Error_State Local_enuError= I2C_OK;
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_MT_SLA_W_ACK)
	{
		Local_enuError= I2C_MT_SLA_W_ERROR;
 68a:	84 e0       	ldi	r24, 0x04	; 4
	}
	return Local_enuError;
}
 68c:	08 95       	ret

0000068e <I2C_Master_enuSendu8Data>:

I2C_Error_State   I2C_Master_enuSendu8Data(u8 I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Put Data to TWDR_REG  */
	TWDR_REG=I2C_Data;
 68e:	83 b9       	out	0x03, r24	; 3
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 690:	86 b7       	in	r24, 0x36	; 54
 692:	80 68       	ori	r24, 0x80	; 128
 694:	86 bf       	out	0x36, r24	; 54
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 696:	06 b6       	in	r0, 0x36	; 54
 698:	07 fe       	sbrs	r0, 7
 69a:	fd cf       	rjmp	.-6      	; 0x696 <I2C_Master_enuSendu8Data+0x8>
	if ((TWSR_REG & 0xF8)!=I2C_MT_DATA_ACK)
 69c:	81 b1       	in	r24, 0x01	; 1
 69e:	88 7f       	andi	r24, 0xF8	; 248
 6a0:	88 32       	cpi	r24, 0x28	; 40
 6a2:	11 f4       	brne	.+4      	; 0x6a8 <I2C_Master_enuSendu8Data+0x1a>
	return Local_enuError;
}

I2C_Error_State   I2C_Master_enuSendu8Data(u8 I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_MT_DATA_ACK)
	{
		Local_enuError= I2C_MT_DATA_ERROR;
 6a8:	85 e0       	ldi	r24, 0x05	; 5
	}
	return Local_enuError;
}
 6aa:	08 95       	ret

000006ac <I2C_Master_enuReadu8Data>:

I2C_Error_State   I2C_Master_enuReadu8Data(u8* I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 6ac:	26 b7       	in	r18, 0x36	; 54
 6ae:	20 68       	ori	r18, 0x80	; 128
 6b0:	26 bf       	out	0x36, r18	; 54
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 6b2:	06 b6       	in	r0, 0x36	; 54
 6b4:	07 fe       	sbrs	r0, 7
 6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <I2C_Master_enuReadu8Data+0x6>
	if ((TWSR_REG & 0xF8)!=I2C_MR_DATA_ACK)
 6b8:	21 b1       	in	r18, 0x01	; 1
 6ba:	28 7f       	andi	r18, 0xF8	; 248
 6bc:	28 34       	cpi	r18, 0x48	; 72
 6be:	29 f4       	brne	.+10     	; 0x6ca <I2C_Master_enuReadu8Data+0x1e>
	{
		Local_enuError= I2C_MR_DATA_ERROR;
	}
	else
	{
		*I2C_Data =TWDR_REG;
 6c0:	23 b1       	in	r18, 0x03	; 3
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
}


I2C_Error_State   I2C_Master_enuReadu8Data(u8* I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_MR_DATA_ACK)
	{
		Local_enuError= I2C_MR_DATA_ERROR;
 6ca:	86 e0       	ldi	r24, 0x06	; 6
	else
	{
		*I2C_Data =TWDR_REG;
	}
	return Local_enuError;
}
 6cc:	08 95       	ret

000006ce <I2C_Master_enuSendStopCond>:

void   I2C_Master_enuSendStopCond(void)
{

	/*		Send the stop condition  */
	SET_BIT(TWCR_REG,TWSTO);
 6ce:	86 b7       	in	r24, 0x36	; 54
 6d0:	80 61       	ori	r24, 0x10	; 16
 6d2:	86 bf       	out	0x36, r24	; 54
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 6d4:	86 b7       	in	r24, 0x36	; 54
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	86 bf       	out	0x36, r24	; 54
}
 6da:	08 95       	ret

000006dc <I2C_Slave_voidListen>:

void	I2C_Slave_voidListen(void)
{
	
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 6dc:	06 b6       	in	r0, 0x36	; 54
 6de:	07 fe       	sbrs	r0, 7
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <I2C_Slave_voidListen>
	
}
 6e2:	08 95       	ret

000006e4 <I2C_Slave_enuReadu8Data>:
I2C_Error_State   I2C_Slave_enuReadu8Data(u8* I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
	/*		Turn off the flag  */
	SET_BIT(TWCR_REG,TWINT);
 6e4:	26 b7       	in	r18, 0x36	; 54
 6e6:	20 68       	ori	r18, 0x80	; 128
 6e8:	26 bf       	out	0x36, r18	; 54
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
 6ea:	06 b6       	in	r0, 0x36	; 54
 6ec:	07 fe       	sbrs	r0, 7
 6ee:	fd cf       	rjmp	.-6      	; 0x6ea <I2C_Slave_enuReadu8Data+0x6>
	if ((TWSR_REG & 0xF8)!=I2C_SR_DATA_ACK)
 6f0:	21 b1       	in	r18, 0x01	; 1
 6f2:	28 7f       	andi	r18, 0xF8	; 248
 6f4:	20 38       	cpi	r18, 0x80	; 128
 6f6:	29 f4       	brne	.+10     	; 0x702 <I2C_Slave_enuReadu8Data+0x1e>
	{
		Local_enuError= I2C_SR_DATA_ERROR;
	}
	else
	{
		*I2C_Data =TWDR_REG;
 6f8:	23 b1       	in	r18, 0x03	; 3
 6fa:	fc 01       	movw	r30, r24
 6fc:	20 83       	st	Z, r18
	while (!(TWCR_REG &  (1<<TWINT)));
	
}
I2C_Error_State   I2C_Slave_enuReadu8Data(u8* I2C_Data)
{
	I2C_Error_State Local_enuError= I2C_OK;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	08 95       	ret
	SET_BIT(TWCR_REG,TWINT);
	/*		Polling on the flag*/
	while (!(TWCR_REG &  (1<<TWINT)));
	if ((TWSR_REG & 0xF8)!=I2C_SR_DATA_ACK)
	{
		Local_enuError= I2C_SR_DATA_ERROR;
 702:	87 e0       	ldi	r24, 0x07	; 7
	else
	{
		*I2C_Data =TWDR_REG;
	}
	return Local_enuError;
}
 704:	08 95       	ret

00000706 <_exit>:
 706:	f8 94       	cli

00000708 <__stop_program>:
 708:	ff cf       	rjmp	.-2      	; 0x708 <__stop_program>
