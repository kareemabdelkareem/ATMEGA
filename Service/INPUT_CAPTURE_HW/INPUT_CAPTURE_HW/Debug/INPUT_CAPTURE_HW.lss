
INPUT_CAPTURE_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000bb2  00000c46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800076  00800076  00000c5c  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000431  00000000  00000000  00003c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000659  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000046f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054a  00000000  00000000  00004a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000849  00000000  00000000  00004f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_10>
  2c:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  8a:	0c 94 d7 05 	jmp	0xbae	; 0xbae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialization>:

/* Description : Initialize PINS Directions       */

void DIO_voidInitialization (void)
{
	DDRA = DIO_u8_PORTA_DIRECTIONS;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIRECTIONS;
  96:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIRECTIONS;
  98:	84 e1       	ldi	r24, 0x14	; 20
  9a:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_u8_PORTD_DIRECTIONS;
  9c:	8f eb       	ldi	r24, 0xBF	; 191
  9e:	81 bb       	out	0x11, r24	; 17

}/*END OF Initialization Function                 */
  a0:	08 95       	ret

000000a2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PinNumber , u8 Copy_u8PinValue)
{

	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	e8 f4       	brcc	.+58     	; 0xe0 <DIO_voidSetPinValue+0x3e>
	{
		/*  Check value passed to fuction HIGH    */

		if (Copy_u8PinValue == DIO_u8_HIGH )
  a6:	61 30       	cpi	r22, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <DIO_voidSetPinValue+0x22>
		{
			/*   MAKE pin numer Copy_u8PinNumber HIGH */

			SET_BIT(PORTA , Copy_u8PinNumber);
  aa:	4b b3       	in	r20, 0x1b	; 27
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinValue+0x16>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinValue+0x12>
  bc:	cb 01       	movw	r24, r22
  be:	84 2b       	or	r24, r20
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret
		/*  Check value passed to fuction LOW    */
		else 
		{
			/*   MAKE pin numer Copy_u8PinNumber LOW */

			CLEAR_BIT(PORTA, Copy_u8PinNumber);
  c4:	4b b3       	in	r20, 0x1b	; 27
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_voidSetPinValue+0x30>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_voidSetPinValue+0x2c>
  d6:	cb 01       	movw	r24, r22
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
		}

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
  e0:	98 2f       	mov	r25, r24
  e2:	98 50       	subi	r25, 0x08	; 8
  e4:	98 30       	cpi	r25, 0x08	; 8
  e6:	e8 f4       	brcc	.+58     	; 0x122 <DIO_voidSetPinValue+0x80>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_voidSetPinValue+0x64>
		{
			SET_BIT (PORTB , Copy_u8PinNumber);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinValue+0x58>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinValue+0x54>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTB , Copy_u8PinNumber);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinValue+0x72>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinValue+0x6e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		}

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 122:	98 2f       	mov	r25, r24
 124:	90 51       	subi	r25, 0x10	; 16
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	e8 f4       	brcc	.+58     	; 0x164 <DIO_voidSetPinValue+0xc2>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 12a:	61 30       	cpi	r22, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_voidSetPinValue+0xa6>
		{
			SET_BIT (PORTC , Copy_u8PinNumber);
 12e:	45 b3       	in	r20, 0x15	; 21
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinValue+0x9a>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinValue+0x96>
 140:	cb 01       	movw	r24, r22
 142:	84 2b       	or	r24, r20
 144:	85 bb       	out	0x15, r24	; 21
 146:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTC , Copy_u8PinNumber);
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinValue+0xb4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinValue+0xb0>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	85 bb       	out	0x15, r24	; 21
 162:	08 95       	ret
		}	
	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 164:	88 51       	subi	r24, 0x18	; 24
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	e0 f4       	brcc	.+56     	; 0x1a2 <DIO_voidSetPinValue+0x100>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <DIO_voidSetPinValue+0xe6>
		{
			SET_BIT (PORTD , Copy_u8PinNumber);
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinValue+0xda>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinValue+0xd6>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTD , Copy_u8PinNumber);
 188:	42 b3       	in	r20, 0x12	; 18
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_voidSetPinValue+0xf4>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_voidSetPinValue+0xf0>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret

000001a4 <DIO_u8GETPinValue>:
/*               Value to either High or Low      */

u8 DIO_u8GETPinValue(u8 Copy_u8PinNumber )
{
	u8 LOC_u8ReturnedPinValue;
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	58 f4       	brcc	.+22     	; 0x1be <DIO_u8GETPinValue+0x1a>
	{
		LOC_u8ReturnedPinValue = GET_BIT(PINA,Copy_u8PinNumber);
 1a8:	29 b3       	in	r18, 0x19	; 25
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	a9 01       	movw	r20, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_u8GETPinValue+0x10>
 1b0:	55 95       	asr	r21
 1b2:	47 95       	ror	r20
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_u8GETPinValue+0xc>
 1b8:	94 2f       	mov	r25, r20
 1ba:	91 70       	andi	r25, 0x01	; 1
 1bc:	2b c0       	rjmp	.+86     	; 0x214 <DIO_u8GETPinValue+0x70>
	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
 1be:	48 2f       	mov	r20, r24
 1c0:	48 50       	subi	r20, 0x08	; 8
 1c2:	48 30       	cpi	r20, 0x08	; 8
 1c4:	58 f4       	brcc	.+22     	; 0x1dc <DIO_u8GETPinValue+0x38>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - (DIO_u8_PORTA_SIZE);
		LOC_u8ReturnedPinValue = GET_BIT(PINB , Copy_u8PinNumber);
 1c6:	26 b3       	in	r18, 0x16	; 22
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	c9 01       	movw	r24, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_u8GETPinValue+0x2e>
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	4a 95       	dec	r20
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_u8GETPinValue+0x2a>
 1d6:	98 2f       	mov	r25, r24
 1d8:	91 70       	andi	r25, 0x01	; 1
 1da:	1c c0       	rjmp	.+56     	; 0x214 <DIO_u8GETPinValue+0x70>

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 1dc:	48 2f       	mov	r20, r24
 1de:	40 51       	subi	r20, 0x10	; 16
 1e0:	48 30       	cpi	r20, 0x08	; 8
 1e2:	58 f4       	brcc	.+22     	; 0x1fa <DIO_u8GETPinValue+0x56>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);
		LOC_u8ReturnedPinValue = GET_BIT(PINC , Copy_u8PinNumber);
 1e4:	23 b3       	in	r18, 0x13	; 19
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	c9 01       	movw	r24, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8GETPinValue+0x4c>
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	4a 95       	dec	r20
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8GETPinValue+0x48>
 1f4:	98 2f       	mov	r25, r24
 1f6:	91 70       	andi	r25, 0x01	; 1
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <DIO_u8GETPinValue+0x70>

	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 1fa:	88 51       	subi	r24, 0x18	; 24
 1fc:	88 30       	cpi	r24, 0x08	; 8
 1fe:	50 f4       	brcc	.+20     	; 0x214 <DIO_u8GETPinValue+0x70>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - (DIO_u8_PORTA_SIZE +  DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);
		LOC_u8ReturnedPinValue = GET_BIT(PIND , Copy_u8PinNumber);
 200:	20 b3       	in	r18, 0x10	; 16
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	a9 01       	movw	r20, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_u8GETPinValue+0x68>
 208:	55 95       	asr	r21
 20a:	47 95       	ror	r20
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_u8GETPinValue+0x64>
 210:	94 2f       	mov	r25, r20
 212:	91 70       	andi	r25, 0x01	; 1

	}
	return LOC_u8ReturnedPinValue ;
}/* END OF Function that GET The Value of a Pin     */
 214:	89 2f       	mov	r24, r25
 216:	08 95       	ret

00000218 <DIO_voidSetPinDirection>:
/* Description : This Function Set The Pin         */
/*               Direction In Run Time             */
void DIO_voidSetPinDirection (u8 Copy_u8PinNumber , u8 Copy_u8PinNumberDir )
{
	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	e8 f4       	brcc	.+58     	; 0x256 <DIO_voidSetPinDirection+0x3e>
	{
		/*  Check value passed to function HIGH    */

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	69 f4       	brne	.+26     	; 0x23a <DIO_voidSetPinDirection+0x22>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRA , Copy_u8PinNumber);
 220:	4a b3       	in	r20, 0x1a	; 26
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinDirection+0x16>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinDirection+0x12>
 232:	cb 01       	movw	r24, r22
 234:	84 2b       	or	r24, r20
 236:	8a bb       	out	0x1a, r24	; 26
 238:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRA, Copy_u8PinNumber);
 23a:	4a b3       	in	r20, 0x1a	; 26
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidSetPinDirection+0x30>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidSetPinDirection+0x2c>
 24c:	cb 01       	movw	r24, r22
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	8a bb       	out	0x1a, r24	; 26
 254:	08 95       	ret
		}

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
 256:	98 2f       	mov	r25, r24
 258:	98 50       	subi	r25, 0x08	; 8
 25a:	98 30       	cpi	r25, 0x08	; 8
 25c:	e8 f4       	brcc	.+58     	; 0x298 <DIO_voidSetPinDirection+0x80>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ;

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_voidSetPinDirection+0x64>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRB , Copy_u8PinNumber);
 262:	47 b3       	in	r20, 0x17	; 23
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_voidSetPinDirection+0x58>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	9a 95       	dec	r25
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_voidSetPinDirection+0x54>
 274:	cb 01       	movw	r24, r22
 276:	84 2b       	or	r24, r20
 278:	87 bb       	out	0x17, r24	; 23
 27a:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRB, Copy_u8PinNumber);
 27c:	47 b3       	in	r20, 0x17	; 23
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_voidSetPinDirection+0x72>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	9a 95       	dec	r25
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_voidSetPinDirection+0x6e>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	87 bb       	out	0x17, r24	; 23
 296:	08 95       	ret
		}

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 298:	98 2f       	mov	r25, r24
 29a:	90 51       	subi	r25, 0x10	; 16
 29c:	98 30       	cpi	r25, 0x08	; 8
 29e:	e8 f4       	brcc	.+58     	; 0x2da <DIO_voidSetPinDirection+0xc2>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ;

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 2a0:	61 30       	cpi	r22, 0x01	; 1
 2a2:	69 f4       	brne	.+26     	; 0x2be <DIO_voidSetPinDirection+0xa6>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRC , Copy_u8PinNumber);
 2a4:	44 b3       	in	r20, 0x14	; 20
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_voidSetPinDirection+0x9a>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	9a 95       	dec	r25
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_voidSetPinDirection+0x96>
 2b6:	cb 01       	movw	r24, r22
 2b8:	84 2b       	or	r24, r20
 2ba:	84 bb       	out	0x14, r24	; 20
 2bc:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRC, Copy_u8PinNumber);
 2be:	44 b3       	in	r20, 0x14	; 20
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	b9 01       	movw	r22, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_voidSetPinDirection+0xb4>
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	9a 95       	dec	r25
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_voidSetPinDirection+0xb0>
 2d0:	cb 01       	movw	r24, r22
 2d2:	80 95       	com	r24
 2d4:	84 23       	and	r24, r20
 2d6:	84 bb       	out	0x14, r24	; 20
 2d8:	08 95       	ret
		}
	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 2da:	88 51       	subi	r24, 0x18	; 24
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	e0 f4       	brcc	.+56     	; 0x318 <DIO_voidSetPinDirection+0x100>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ;

		if (Copy_u8PinNumberDir == DIO_u8_OUTPUT )
 2e0:	61 30       	cpi	r22, 0x01	; 1
 2e2:	69 f4       	brne	.+26     	; 0x2fe <DIO_voidSetPinDirection+0xe6>
		{
			/*   MAKE pin number Copy_u8PinNumber HIGH */

			SET_BIT(DDRD , Copy_u8PinNumber);
 2e4:	41 b3       	in	r20, 0x11	; 17
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinDirection+0xda>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinDirection+0xd6>
 2f6:	cb 01       	movw	r24, r22
 2f8:	84 2b       	or	r24, r20
 2fa:	81 bb       	out	0x11, r24	; 17
 2fc:	08 95       	ret
		/*  Check value passed to function LOW    */
		else
		{
			/*   MAKE pin number Copy_u8PinNumber LOW */

			CLEAR_BIT(DDRD, Copy_u8PinNumber);
 2fe:	41 b3       	in	r20, 0x11	; 17
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_voidSetPinDirection+0xf4>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_voidSetPinDirection+0xf0>
 310:	cb 01       	movw	r24, r22
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	81 bb       	out	0x11, r24	; 17
 318:	08 95       	ret

0000031a <DIO_voidTogglePin>:


void DIO_voidTogglePin (u8 Copy_u8PinNumber  )
{
	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	68 f4       	brcc	.+26     	; 0x338 <DIO_voidTogglePin+0x1e>
	{
		TOGGLE_BIT(PORTA ,Copy_u8PinNumber);
 31e:	4b b3       	in	r20, 0x1b	; 27
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidTogglePin+0x12>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidTogglePin+0xe>
 330:	cb 01       	movw	r24, r22
 332:	84 27       	eor	r24, r20
 334:	8b bb       	out	0x1b, r24	; 27
 336:	08 95       	ret

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
 338:	98 2f       	mov	r25, r24
 33a:	98 50       	subi	r25, 0x08	; 8
 33c:	98 30       	cpi	r25, 0x08	; 8
 33e:	68 f4       	brcc	.+26     	; 0x35a <DIO_voidTogglePin+0x40>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ;
		TOGGLE_BIT(PORTB ,Copy_u8PinNumber);
 340:	48 b3       	in	r20, 0x18	; 24
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	b9 01       	movw	r22, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_voidTogglePin+0x34>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	9a 95       	dec	r25
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_voidTogglePin+0x30>
 352:	cb 01       	movw	r24, r22
 354:	84 27       	eor	r24, r20
 356:	88 bb       	out	0x18, r24	; 24
 358:	08 95       	ret


	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 35a:	98 2f       	mov	r25, r24
 35c:	90 51       	subi	r25, 0x10	; 16
 35e:	98 30       	cpi	r25, 0x08	; 8
 360:	68 f4       	brcc	.+26     	; 0x37c <DIO_voidTogglePin+0x62>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ;
		TOGGLE_BIT(PORTC ,Copy_u8PinNumber);
 362:	45 b3       	in	r20, 0x15	; 21
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	b9 01       	movw	r22, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_voidTogglePin+0x56>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	9a 95       	dec	r25
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_voidTogglePin+0x52>
 374:	cb 01       	movw	r24, r22
 376:	84 27       	eor	r24, r20
 378:	85 bb       	out	0x15, r24	; 21
 37a:	08 95       	ret

	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 37c:	88 51       	subi	r24, 0x18	; 24
 37e:	88 30       	cpi	r24, 0x08	; 8
 380:	60 f4       	brcc	.+24     	; 0x39a <DIO_voidTogglePin+0x80>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ;

		TOGGLE_BIT(PORTD ,Copy_u8PinNumber);
 382:	42 b3       	in	r20, 0x12	; 18
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_voidTogglePin+0x76>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_voidTogglePin+0x72>
 394:	cb 01       	movw	r24, r22
 396:	84 27       	eor	r24, r20
 398:	82 bb       	out	0x12, r24	; 18
 39a:	08 95       	ret

0000039c <GIE_voidEnable>:
	/***********************************************************/	
	/** !comment : From Data Sheet : To Enable GIE you must	   */
	/**            set Bit Number 7 in SREG REGISTER by 1      */
	/***********************************************************/

	SET_BIT(SREG , 7);
 39c:	8f b7       	in	r24, 0x3f	; 63
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	8f bf       	out	0x3f, r24	; 63
	
}
 3a2:	08 95       	ret

000003a4 <GIE_voidDisable>:
	/***********************************************************/	
	/** !comment : From Data Sheet : To Disable GIE you must   */
	/**            cleare Bit Number 7 in SREG REGISTER by 0   */
	/***********************************************************/
	
	CLEAR_BIT(SREG , 7);
 3a4:	8f b7       	in	r24, 0x3f	; 63
 3a6:	8f 77       	andi	r24, 0x7F	; 127
 3a8:	8f bf       	out	0x3f, r24	; 63
	
}
 3aa:	08 95       	ret

000003ac <main>:
	u16 u16Duty_cycle ;
	u16 u16Period;
	u16 u16Onperiod;
	u16 u16Freq = 0;

	DIO_voidInitialization();
 3ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialization>

	LCD_vidInit();
 3b0:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_vidInit>

	TIMER0_void_Init();
 3b4:	0e 94 ae 03 	call	0x75c	; 0x75c <TIMER0_void_Init>
	TIMER0_void_SetCompareVal(127); /*	Duty 50% .. Freq = fcpu/(pre * counts)= (8000000 /8*256) */
 3b8:	8f e7       	ldi	r24, 0x7F	; 127
 3ba:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <TIMER0_void_SetCompareVal>
	// F = 3906.25 HZ
	///init TIMER1
	/*Normal Mode .. Pre = 1024 .. enable ICU .. Rissing Edge	*/
	TCCR1A = 0x00;
 3be:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b01000010;
 3c0:	82 e4       	ldi	r24, 0x42	; 66
 3c2:	8e bd       	out	0x2e, r24	; 46

	TCNT1H = 0;
 3c4:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 3c6:	1c bc       	out	0x2c, r1	; 44

	GIE_voidEnable();
 3c8:	0e 94 ce 01 	call	0x39c	; 0x39c <GIE_voidEnable>

	SET_BIT(TIMSK,5);	//enable ICU INT
 3cc:	89 b7       	in	r24, 0x39	; 57
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	89 bf       	out	0x39, r24	; 57
	//// end init

	while(u8flag!=3);
 3d2:	80 91 75 00 	lds	r24, 0x0075
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x26>
	//LCD_go_to_xy(2,0);
	//lcd_write_char('a');

	u16Period = u16temp2 - u16temp1;
 3da:	c0 91 7c 00 	lds	r28, 0x007C
 3de:	d0 91 7d 00 	lds	r29, 0x007D
 3e2:	80 91 78 00 	lds	r24, 0x0078
 3e6:	90 91 79 00 	lds	r25, 0x0079
 3ea:	c8 1b       	sub	r28, r24
 3ec:	d9 0b       	sbc	r29, r25

	u16Onperiod = u16temp3 - u16temp2;
 3ee:	20 91 7a 00 	lds	r18, 0x007A
 3f2:	30 91 7b 00 	lds	r19, 0x007B
 3f6:	80 91 7c 00 	lds	r24, 0x007C
 3fa:	90 91 7d 00 	lds	r25, 0x007D
 3fe:	28 1b       	sub	r18, r24
 400:	39 0b       	sbc	r19, r25

	u16Duty_cycle = ((u16Onperiod*100)/u16Period);
 402:	44 e6       	ldi	r20, 0x64	; 100
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	24 9f       	mul	r18, r20
 408:	c0 01       	movw	r24, r0
 40a:	25 9f       	mul	r18, r21
 40c:	90 0d       	add	r25, r0
 40e:	34 9f       	mul	r19, r20
 410:	90 0d       	add	r25, r0
 412:	11 24       	eor	r1, r1
 414:	be 01       	movw	r22, r28
 416:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodhi4>
 41a:	06 2f       	mov	r16, r22
 41c:	17 2f       	mov	r17, r23
	//lcd_write_string("Duty Cycle =");
	//LCD_go_to_xy(1,11);
	/********************************************/


	LCD_vidWriteString("Duty Cycle =");
 41e:	80 e6       	ldi	r24, 0x60	; 96
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_vidWriteString>
	LCD_vidGotoXY(1,11);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	6b e0       	ldi	r22, 0x0B	; 11
 42a:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_vidGotoXY>
	LCD_u8WriteINT(u16Duty_cycle);
 42e:	80 2f       	mov	r24, r16
 430:	91 2f       	mov	r25, r17
 432:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LCD_u8WriteINT>
	/**************************************************/
	//LCD_WriteNumber(u16Duty_cycle);
	//lcd_write_string("%");
	/***************************************/

	LCD_vidWriteChar('%');
 436:	85 e2       	ldi	r24, 0x25	; 37
 438:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidWriteChar>
	LCD_vidGotoXY(2,0);
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_vidGotoXY>
	//LCD_WriteNumber(u16Period);
	/**************************************************/
	//LCD_vidWriteString("Period =");
	//LCD_u8WriteINT(u16Period);
	/*****************************************************/
	LCD_vidWriteString("Freq = ");
 444:	8d e6       	ldi	r24, 0x6D	; 109
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_vidWriteString>

	u16Onperiod = u16temp3 - u16temp2;

	u16Duty_cycle = ((u16Onperiod*100)/u16Period);

	u16Freq = (1 / ( u16Period * f32TimerClock ));
 44c:	be 01       	movw	r22, r28
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 456:	2d eb       	ldi	r18, 0xBD	; 189
 458:	37 e3       	ldi	r19, 0x37	; 55
 45a:	46 e8       	ldi	r20, 0x86	; 134
 45c:	55 e3       	ldi	r21, 0x35	; 53
 45e:	0e 94 60 05 	call	0xac0	; 0xac0 <__mulsf3>
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	80 e8       	ldi	r24, 0x80	; 128
 46c:	9f e3       	ldi	r25, 0x3F	; 63
 46e:	0e 94 3e 04 	call	0x87c	; 0x87c <__divsf3>
 472:	0e 94 a6 04 	call	0x94c	; 0x94c <__fixunssfsi>
 476:	dc 01       	movw	r26, r24
 478:	cb 01       	movw	r24, r22
	/**************************************************/
	//LCD_vidWriteString("Period =");
	//LCD_u8WriteINT(u16Period);
	/*****************************************************/
	LCD_vidWriteString("Freq = ");
	LCD_u8WriteINT(u16Freq);
 47a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LCD_u8WriteINT>
 47e:	ff cf       	rjmp	.-2      	; 0x47e <main+0xd2>

00000480 <__vector_6>:




void __vector_6(void)
{
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
	if (u8flag == 1)
 48e:	80 91 75 00 	lds	r24, 0x0075
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	51 f4       	brne	.+20     	; 0x4aa <__vector_6+0x2a>
	{
		u16temp1 = ICR1 ;
 496:	86 b5       	in	r24, 0x26	; 38
 498:	97 b5       	in	r25, 0x27	; 39
 49a:	90 93 79 00 	sts	0x0079, r25
 49e:	80 93 78 00 	sts	0x0078, r24
		u8flag =2 ;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	80 93 75 00 	sts	0x0075, r24
 4a8:	1e c0       	rjmp	.+60     	; 0x4e6 <__vector_6+0x66>
	}
	else if (u8flag == 2 )
 4aa:	80 91 75 00 	lds	r24, 0x0075
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	69 f4       	brne	.+26     	; 0x4cc <__vector_6+0x4c>
	{
		// copy 
		u16temp2 = ICR1  ;
 4b2:	86 b5       	in	r24, 0x26	; 38
 4b4:	97 b5       	in	r25, 0x27	; 39
 4b6:	90 93 7d 00 	sts	0x007D, r25
 4ba:	80 93 7c 00 	sts	0x007C, r24
		// set to falling edge 
		CLEAR_BIT(TCCR1B,6) ;
 4be:	8e b5       	in	r24, 0x2e	; 46
 4c0:	8f 7b       	andi	r24, 0xBF	; 191
 4c2:	8e bd       	out	0x2e, r24	; 46
		u8flag = 3 ;
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	80 93 75 00 	sts	0x0075, r24
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__vector_6+0x66>
		
	}
	else if (u8flag == 3)
 4cc:	80 91 75 00 	lds	r24, 0x0075
 4d0:	83 30       	cpi	r24, 0x03	; 3
 4d2:	49 f4       	brne	.+18     	; 0x4e6 <__vector_6+0x66>
	{
		u16temp3 =  ICR1   ;
 4d4:	86 b5       	in	r24, 0x26	; 38
 4d6:	97 b5       	in	r25, 0x27	; 39
 4d8:	90 93 7b 00 	sts	0x007B, r25
 4dc:	80 93 7a 00 	sts	0x007A, r24
		// set to rising 
		SET_BIT(TCCR1B,6) ;
 4e0:	8e b5       	in	r24, 0x2e	; 46
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	8e bd       	out	0x2e, r24	; 46
		
	}
	
}
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <vidPutOnBus>:
	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
}

static void vidPutOnBus( u8 u8CmdDataCpy )
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
	u8 LOC_u8Loop = LCD_DATA_D0_START ;

	DIO_voidSetPinValue( LCD_u8DATA_0 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 4f8:	c8 2f       	mov	r28, r24
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
 4fc:	68 2f       	mov	r22, r24
 4fe:	61 70       	andi	r22, 0x01	; 1
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_1 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 506:	be 01       	movw	r22, r28
 508:	75 95       	asr	r23
 50a:	67 95       	ror	r22
 50c:	61 70       	andi	r22, 0x01	; 1
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_2 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 514:	be 01       	movw	r22, r28
 516:	75 95       	asr	r23
 518:	67 95       	ror	r22
 51a:	75 95       	asr	r23
 51c:	67 95       	ror	r22
 51e:	61 70       	andi	r22, 0x01	; 1
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_3 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 526:	be 01       	movw	r22, r28
 528:	75 95       	asr	r23
 52a:	67 95       	ror	r22
 52c:	75 95       	asr	r23
 52e:	67 95       	ror	r22
 530:	75 95       	asr	r23
 532:	67 95       	ror	r22
 534:	61 70       	andi	r22, 0x01	; 1
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_4 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 53c:	be 01       	movw	r22, r28
 53e:	75 95       	asr	r23
 540:	67 95       	ror	r22
 542:	75 95       	asr	r23
 544:	67 95       	ror	r22
 546:	75 95       	asr	r23
 548:	67 95       	ror	r22
 54a:	75 95       	asr	r23
 54c:	67 95       	ror	r22
 54e:	61 70       	andi	r22, 0x01	; 1
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_5 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 556:	be 01       	movw	r22, r28
 558:	75 95       	asr	r23
 55a:	67 95       	ror	r22
 55c:	75 95       	asr	r23
 55e:	67 95       	ror	r22
 560:	75 95       	asr	r23
 562:	67 95       	ror	r22
 564:	75 95       	asr	r23
 566:	67 95       	ror	r22
 568:	75 95       	asr	r23
 56a:	67 95       	ror	r22
 56c:	61 70       	andi	r22, 0x01	; 1
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_6 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 574:	be 01       	movw	r22, r28
 576:	06 2e       	mov	r0, r22
 578:	67 2f       	mov	r22, r23
 57a:	00 0c       	add	r0, r0
 57c:	66 1f       	adc	r22, r22
 57e:	77 0b       	sbc	r23, r23
 580:	00 0c       	add	r0, r0
 582:	66 1f       	adc	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	61 70       	andi	r22, 0x01	; 1
 588:	86 e0       	ldi	r24, 0x06	; 6
 58a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_7 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 58e:	be 01       	movw	r22, r28
 590:	66 0f       	add	r22, r22
 592:	67 2f       	mov	r22, r23
 594:	66 1f       	adc	r22, r22
 596:	77 0b       	sbc	r23, r23
 598:	61 70       	andi	r22, 0x01	; 1
 59a:	87 e0       	ldi	r24, 0x07	; 7
 59c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* lach  */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_HIGH );
 5a0:	8c e1       	ldi	r24, 0x1C	; 28
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a8:	83 ef       	ldi	r24, 0xF3	; 243
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <vidPutOnBus+0xb8>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <vidPutOnBus+0xbe>
 5b2:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 5b4:	8c e1       	ldi	r24, 0x1C	; 28
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 5bc:	83 ef       	ldi	r24, 0xF3	; 243
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <vidPutOnBus+0xcc>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <vidPutOnBus+0xd2>
 5c6:	00 00       	nop
	_delay_ms(2);

}
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <LCD_vidSendCmd>:
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );

}

void LCD_vidSendCmd( u8 u8CmdCpy )
{
 5ce:	cf 93       	push	r28
 5d0:	c8 2f       	mov	r28, r24
	/** to send command  ( RS = 0 and R/W = 0 ) =====> (write instruction) */

	/* RS  0 CMD */  
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_LOW );
 5d2:	88 e1       	ldi	r24, 0x18	; 24
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 5da:	89 e1       	ldi	r24, 0x19	; 25
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CmdCpy);
 5e2:	8c 2f       	mov	r24, r28
 5e4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vidPutOnBus>

}
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <LCD_vidWriteChar>:

void LCD_vidWriteChar( u8 u8CharCpy )
{
 5ec:	cf 93       	push	r28
 5ee:	c8 2f       	mov	r28, r24
	/** to write command   ( RS = 1 and R/W = 0 ) =====> (write to DR Reg) */

	/* RS  1 CMD */
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_HIGH );
 5f0:	88 e1       	ldi	r24, 0x18	; 24
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 5f8:	89 e1       	ldi	r24, 0x19	; 25
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
 600:	8c 2f       	mov	r24, r28
 602:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vidPutOnBus>
}
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <LCD_vidClear>:
}

void LCD_vidClear( void )
{
	/*  function set (Clear  Display) */
	LCD_vidSendCmd(0b00000001);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_vidSendCmd>
 610:	83 ef       	ldi	r24, 0xF3	; 243
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_vidClear+0xa>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_vidClear+0x10>
 61a:	00 00       	nop
	/* wait 2 */
	_delay_ms(2);
}
 61c:	08 95       	ret

0000061e <LCD_vidInit>:
 61e:	8d e2       	ldi	r24, 0x2D	; 45
 620:	92 e2       	ldi	r25, 0x22	; 34
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <LCD_vidInit+0x4>
 626:	00 c0       	rjmp	.+0      	; 0x628 <LCD_vidInit+0xa>
 628:	00 00       	nop
	/* wait 35 */
	_delay_ms(35);

	/*  function set */

	LCD_vidSendCmd(0b00111000);
 62a:	88 e3       	ldi	r24, 0x38	; 56
 62c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_vidSendCmd>
 630:	89 ef       	ldi	r24, 0xF9	; 249
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <LCD_vidInit+0x16>
 638:	00 c0       	rjmp	.+0      	; 0x63a <LCD_vidInit+0x1c>
 63a:	00 00       	nop
	/* wait 1 */
	_delay_ms(1);

	/*  function set (on/off) */
	LCD_vidSendCmd(0b00001100);
 63c:	8c e0       	ldi	r24, 0x0C	; 12
 63e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_vidSendCmd>
 642:	89 ef       	ldi	r24, 0xF9	; 249
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <LCD_vidInit+0x28>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <LCD_vidInit+0x2e>
 64c:	00 00       	nop
	/*LCD_vidSendCmd(0b00000001);*/
	/*	 wait 2                  */
	/*_delay_ms(2);	             */
	/*****************************/

	LCD_vidClear();
 64e:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_vidClear>

	/*  function set (Entry mode set - cursor increase or decrease ) */
	LCD_vidSendCmd(0b00000110);
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_vidSendCmd>
 658:	83 ef       	ldi	r24, 0xF3	; 243
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <LCD_vidInit+0x3e>
 660:	00 c0       	rjmp	.+0      	; 0x662 <LCD_vidInit+0x44>
 662:	00 00       	nop
	/* wait 2 */
	_delay_ms(2);

	/* latch = 0 */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 664:	8c e1       	ldi	r24, 0x1C	; 28
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

}
 66c:	08 95       	ret

0000066e <LCD_vidGotoXY>:


void LCD_vidGotoXY( u8 u8LineNbCpy , u8 u8CharNbCpy )
{
 /* switchcase over line */
	if(  u8LineNbCpy == 1 )
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	29 f4       	brne	.+10     	; 0x67c <LCD_vidGotoXY+0xe>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_FIRST_LINE + u8CharNbCpy) );
 672:	86 2f       	mov	r24, r22
 674:	80 58       	subi	r24, 0x80	; 128
 676:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_vidSendCmd>
 67a:	08 95       	ret
			
	}
	
	else if( u8LineNbCpy == 2 )
 67c:	82 30       	cpi	r24, 0x02	; 2
 67e:	21 f4       	brne	.+8      	; 0x688 <LCD_vidGotoXY+0x1a>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );
 680:	86 2f       	mov	r24, r22
 682:	80 54       	subi	r24, 0x40	; 64
 684:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_vidSendCmd>
 688:	08 95       	ret

0000068a <LCD_vidWriteString>:
}


/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	8c 01       	movw	r16, r24
	u8 Loc_u8Counter = 0 ;
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 692:	fc 01       	movw	r30, r24
 694:	80 81       	ld	r24, Z
 696:	88 23       	and	r24, r24
 698:	51 f0       	breq	.+20     	; 0x6ae <LCD_vidWriteString+0x24>


/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
	u8 Loc_u8Counter = 0 ;
 69a:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
	{
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
 69c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidWriteChar>
		Loc_u8Counter++;		
 6a0:	cf 5f       	subi	r28, 0xFF	; 255
/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
	u8 Loc_u8Counter = 0 ;
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 6a2:	f8 01       	movw	r30, r16
 6a4:	ec 0f       	add	r30, r28
 6a6:	f1 1d       	adc	r31, r1
 6a8:	80 81       	ld	r24, Z
 6aa:	88 23       	and	r24, r24
 6ac:	b9 f7       	brne	.-18     	; 0x69c <LCD_vidWriteString+0x12>
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
		Loc_u8Counter++;		
	}
	

}
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	08 95       	ret

000006b6 <Private_u16Power>:

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 6b6:	66 23       	and	r22, r22
 6b8:	81 f0       	breq	.+32     	; 0x6da <Private_u16Power+0x24>
}

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
 6ba:	21 e0       	ldi	r18, 0x01	; 1
 6bc:	30 e0       	ldi	r19, 0x00	; 0
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 6be:	40 e0       	ldi	r20, 0x00	; 0
	{
		Local_u16Result*=Copy_u8Op1;
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	f9 01       	movw	r30, r18
 6c4:	e8 9f       	mul	r30, r24
 6c6:	90 01       	movw	r18, r0
 6c8:	e9 9f       	mul	r30, r25
 6ca:	30 0d       	add	r19, r0
 6cc:	f8 9f       	mul	r31, r24
 6ce:	30 0d       	add	r19, r0
 6d0:	11 24       	eor	r1, r1

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 6d2:	4f 5f       	subi	r20, 0xFF	; 255
 6d4:	46 17       	cp	r20, r22
 6d6:	a9 f7       	brne	.-22     	; 0x6c2 <Private_u16Power+0xc>
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <Private_u16Power+0x28>
}

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
 6da:	21 e0       	ldi	r18, 0x01	; 1
 6dc:	30 e0       	ldi	r19, 0x00	; 0
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
	{
		Local_u16Result*=Copy_u8Op1;
	}
	return Local_u16Result;
}
 6de:	82 2f       	mov	r24, r18
 6e0:	93 2f       	mov	r25, r19
 6e2:	08 95       	ret

000006e4 <LCD_u8WriteINT>:
Outputs: Error state -> 0 No Error
					 -> 1 Error
 */

u8 LCD_u8WriteINT(u16 Copy_u16NB)
{
 6e4:	cf 92       	push	r12
 6e6:	df 92       	push	r13
 6e8:	ef 92       	push	r14
 6ea:	ff 92       	push	r15
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	6c 01       	movw	r12, r24
	u8 Local_u8Error=0;

	if(Copy_u16NB==0)
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	21 f4       	brne	.+8      	; 0x700 <LCD_u8WriteINT+0x1c>
	{
		LCD_vidWriteChar(48);
 6f8:	80 e3       	ldi	r24, 0x30	; 48
 6fa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidWriteChar>
 6fe:	25 c0       	rjmp	.+74     	; 0x74a <LCD_u8WriteINT+0x66>

u8 LCD_u8WriteINT(u16 Copy_u16NB)
{
	u8 Local_u8Error=0;

	if(Copy_u16NB==0)
 700:	c0 e0       	ldi	r28, 0x00	; 0
		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
		{
			Local_u8Digits++; //Increment no of digits by one

			Local_u16CopyOfNB/=10; //get rid of the most right digit
 702:	2a e0       	ldi	r18, 0x0A	; 10
 704:	30 e0       	ldi	r19, 0x00	; 0
		u16 Local_u16CopyOfNB=Copy_u16NB;

		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
		{
			Local_u8Digits++; //Increment no of digits by one
 706:	cf 5f       	subi	r28, 0xFF	; 255

			Local_u16CopyOfNB/=10; //get rid of the most right digit
 708:	b9 01       	movw	r22, r18
 70a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodhi4>
 70e:	cb 01       	movw	r24, r22
	{
		u8 Local_u8Digits=0,Local_u8Counter;
		u16 Local_u16CopyOfNB=Copy_u16NB;

		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	c9 f7       	brne	.-14     	; 0x706 <LCD_u8WriteINT+0x22>
		}

		Local_u16CopyOfNB=Copy_u16NB;

		/*		Loop on the number and print every single digit alone each iteration*/
		for(Local_u8Counter=0;Local_u8Counter<Local_u8Digits;Local_u8Counter++)
 714:	cc 23       	and	r28, r28
 716:	c9 f0       	breq	.+50     	; 0x74a <LCD_u8WriteINT+0x66>
 718:	c1 50       	subi	r28, 0x01	; 1
 71a:	dc 2d       	mov	r29, r12
 71c:	1d 2d       	mov	r17, r13
		{
			/*Get the most left digit*/
			Local_u16CopyOfNB/=Private_u16Power(10,Local_u8Digits-Local_u8Counter-1);
 71e:	8a e0       	ldi	r24, 0x0A	; 10
 720:	6c 2f       	mov	r22, r28
 722:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Private_u16Power>
 726:	7c 01       	movw	r14, r24
 728:	8d 2f       	mov	r24, r29
 72a:	91 2f       	mov	r25, r17
 72c:	b7 01       	movw	r22, r14
 72e:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodhi4>

			/*Print the most left digit*/
			LCD_vidWriteChar(48+Local_u16CopyOfNB);
 732:	86 2f       	mov	r24, r22
 734:	80 5d       	subi	r24, 0xD0	; 208
 736:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidWriteChar>

			/*Load the original number*/
			Local_u16CopyOfNB=Copy_u16NB;

			/*Get rid of the left most digit*/
			Local_u16CopyOfNB%=Private_u16Power(10,Local_u8Digits-Local_u8Counter-1);
 73a:	c6 01       	movw	r24, r12
 73c:	b7 01       	movw	r22, r14
 73e:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodhi4>
 742:	d8 2f       	mov	r29, r24
 744:	19 2f       	mov	r17, r25
 746:	c1 50       	subi	r28, 0x01	; 1
 748:	50 f7       	brcc	.-44     	; 0x71e <LCD_u8WriteINT+0x3a>
		}
	}
	return Local_u8Error;
}
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	ff 90       	pop	r15
 754:	ef 90       	pop	r14
 756:	df 90       	pop	r13
 758:	cf 90       	pop	r12
 75a:	08 95       	ret

0000075c <TIMER0_void_Init>:
	#elif(TIMER0_MODE == TIMER0_CTC)
		CLEAR_BIT(TCCR0 , 6);
		SET_BIT(TCCR0 , 3);
		
	#elif(TIMER0_MODE == TIMER0_FAST_PWM )
		SET_BIT(TCCR0 , 6);
 75c:	83 b7       	in	r24, 0x33	; 51
 75e:	80 64       	ori	r24, 0x40	; 64
 760:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 3);
 762:	83 b7       	in	r24, 0x33	; 51
 764:	88 60       	ori	r24, 0x08	; 8
 766:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 0);
		CLEAR_BIT(TCCR0 , 1);
		CLEAR_BIT(TCCR0 , 2);
	
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_8)
		CLEAR_BIT(TCCR0 , 0);
 768:	83 b7       	in	r24, 0x33	; 51
 76a:	8e 7f       	andi	r24, 0xFE	; 254
 76c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 1);
 76e:	83 b7       	in	r24, 0x33	; 51
 770:	82 60       	ori	r24, 0x02	; 2
 772:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 2);
 774:	83 b7       	in	r24, 0x33	; 51
 776:	8b 7f       	andi	r24, 0xFB	; 251
 778:	83 bf       	out	0x33, r24	; 51
	
	#elif(TIMER0_COM_EVENT == TIMER0_TOGGLE)
		SET_BIT(TCCR0 , 4)
		CLEAR_BIT(TCCR0 , 5);
	#elif(TIMER0_COM_EVENT == TIMER0_CLEAR )
		CLEAR_BIT(TCCR0 , 4);
 77a:	83 b7       	in	r24, 0x33	; 51
 77c:	8f 7e       	andi	r24, 0xEF	; 239
 77e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 5);
 780:	83 b7       	in	r24, 0x33	; 51
 782:	80 62       	ori	r24, 0x20	; 32
 784:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 5);

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);	
 786:	89 b7       	in	r24, 0x39	; 57
 788:	8e 7f       	andi	r24, 0xFE	; 254
 78a:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 78c:	89 b7       	in	r24, 0x39	; 57
 78e:	8d 7f       	andi	r24, 0xFD	; 253
 790:	89 bf       	out	0x39, r24	; 57
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);	
 792:	88 b7       	in	r24, 0x38	; 56
 794:	81 60       	ori	r24, 0x01	; 1
 796:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 798:	88 b7       	in	r24, 0x38	; 56
 79a:	82 60       	ori	r24, 0x02	; 2
 79c:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT0 = 0 ;
 79e:	12 be       	out	0x32, r1	; 50
	OCR0 = 0 ;
 7a0:	1c be       	out	0x3c, r1	; 60
	
	
}
 7a2:	08 95       	ret

000007a4 <TIMER0_void_SetTimerReg>:

void TIMER0_void_SetTimerReg(u8 Copy_uint8Val)
{
	TCNT0 = Copy_uint8Val ;
 7a4:	82 bf       	out	0x32, r24	; 50
}
 7a6:	08 95       	ret

000007a8 <TIMER0_void_SetCompareVal>:

void TIMER0_void_SetCompareVal(u8 Copy_uint8Val)
{
	OCR0 = Copy_uint8Val ;
 7a8:	8c bf       	out	0x3c, r24	; 60
}
 7aa:	08 95       	ret

000007ac <TIMER0_void_EnableOVInt>:

void TIMER0_void_EnableOVInt(void)
{
	SET_BIT(TIMSK , 0);
 7ac:	89 b7       	in	r24, 0x39	; 57
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	89 bf       	out	0x39, r24	; 57
}
 7b2:	08 95       	ret

000007b4 <TIMER0_void_DisableOVInt>:

void TIMER0_void_DisableOVInt(void)
{
	CLEAR_BIT(TIMSK , 0);
 7b4:	89 b7       	in	r24, 0x39	; 57
 7b6:	8e 7f       	andi	r24, 0xFE	; 254
 7b8:	89 bf       	out	0x39, r24	; 57
}
 7ba:	08 95       	ret

000007bc <TIMER0_void_EnableCTCInt>:

void TIMER0_void_EnableCTCInt(void)
{
	SET_BIT(TIMSK , 1);
 7bc:	89 b7       	in	r24, 0x39	; 57
 7be:	82 60       	ori	r24, 0x02	; 2
 7c0:	89 bf       	out	0x39, r24	; 57
}
 7c2:	08 95       	ret

000007c4 <TIMER0_void_DisableCTCInt>:

void TIMER0_void_DisableCTCInt(void)
{
	CLEAR_BIT(TIMSK , 1);
 7c4:	89 b7       	in	r24, 0x39	; 57
 7c6:	8d 7f       	andi	r24, 0xFD	; 253
 7c8:	89 bf       	out	0x39, r24	; 57
}
 7ca:	08 95       	ret

000007cc <TIMER0_void_SetOVCallBack>:

void TIMER0_void_SetOVCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_OV_CallBack = Copy_ptr ;
 7cc:	90 93 81 00 	sts	0x0081, r25
 7d0:	80 93 80 00 	sts	0x0080, r24
}
 7d4:	08 95       	ret

000007d6 <TIMER0_void_SetCTCCallBack>:

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 7d6:	90 93 7f 00 	sts	0x007F, r25
 7da:	80 93 7e 00 	sts	0x007E, r24
	
}
 7de:	08 95       	ret

000007e0 <__vector_11>:

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 7e0:	1f 92       	push	r1
 7e2:	0f 92       	push	r0
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	0f 92       	push	r0
 7e8:	11 24       	eor	r1, r1
 7ea:	2f 93       	push	r18
 7ec:	3f 93       	push	r19
 7ee:	4f 93       	push	r20
 7f0:	5f 93       	push	r21
 7f2:	6f 93       	push	r22
 7f4:	7f 93       	push	r23
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
 7fa:	af 93       	push	r26
 7fc:	bf 93       	push	r27
 7fe:	ef 93       	push	r30
 800:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 802:	e0 91 80 00 	lds	r30, 0x0080
 806:	f0 91 81 00 	lds	r31, 0x0081
 80a:	09 95       	icall
}
 80c:	ff 91       	pop	r31
 80e:	ef 91       	pop	r30
 810:	bf 91       	pop	r27
 812:	af 91       	pop	r26
 814:	9f 91       	pop	r25
 816:	8f 91       	pop	r24
 818:	7f 91       	pop	r23
 81a:	6f 91       	pop	r22
 81c:	5f 91       	pop	r21
 81e:	4f 91       	pop	r20
 820:	3f 91       	pop	r19
 822:	2f 91       	pop	r18
 824:	0f 90       	pop	r0
 826:	0f be       	out	0x3f, r0	; 63
 828:	0f 90       	pop	r0
 82a:	1f 90       	pop	r1
 82c:	18 95       	reti

0000082e <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 82e:	1f 92       	push	r1
 830:	0f 92       	push	r0
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	0f 92       	push	r0
 836:	11 24       	eor	r1, r1
 838:	2f 93       	push	r18
 83a:	3f 93       	push	r19
 83c:	4f 93       	push	r20
 83e:	5f 93       	push	r21
 840:	6f 93       	push	r22
 842:	7f 93       	push	r23
 844:	8f 93       	push	r24
 846:	9f 93       	push	r25
 848:	af 93       	push	r26
 84a:	bf 93       	push	r27
 84c:	ef 93       	push	r30
 84e:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 850:	e0 91 7e 00 	lds	r30, 0x007E
 854:	f0 91 7f 00 	lds	r31, 0x007F
 858:	09 95       	icall
}
 85a:	ff 91       	pop	r31
 85c:	ef 91       	pop	r30
 85e:	bf 91       	pop	r27
 860:	af 91       	pop	r26
 862:	9f 91       	pop	r25
 864:	8f 91       	pop	r24
 866:	7f 91       	pop	r23
 868:	6f 91       	pop	r22
 86a:	5f 91       	pop	r21
 86c:	4f 91       	pop	r20
 86e:	3f 91       	pop	r19
 870:	2f 91       	pop	r18
 872:	0f 90       	pop	r0
 874:	0f be       	out	0x3f, r0	; 63
 876:	0f 90       	pop	r0
 878:	1f 90       	pop	r1
 87a:	18 95       	reti

0000087c <__divsf3>:
 87c:	0c d0       	rcall	.+24     	; 0x896 <__divsf3x>
 87e:	e6 c0       	rjmp	.+460    	; 0xa4c <__fp_round>
 880:	de d0       	rcall	.+444    	; 0xa3e <__fp_pscB>
 882:	40 f0       	brcs	.+16     	; 0x894 <__divsf3+0x18>
 884:	d5 d0       	rcall	.+426    	; 0xa30 <__fp_pscA>
 886:	30 f0       	brcs	.+12     	; 0x894 <__divsf3+0x18>
 888:	21 f4       	brne	.+8      	; 0x892 <__divsf3+0x16>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	19 f0       	breq	.+6      	; 0x894 <__divsf3+0x18>
 88e:	c7 c0       	rjmp	.+398    	; 0xa1e <__fp_inf>
 890:	51 11       	cpse	r21, r1
 892:	10 c1       	rjmp	.+544    	; 0xab4 <__fp_szero>
 894:	ca c0       	rjmp	.+404    	; 0xa2a <__fp_nan>

00000896 <__divsf3x>:
 896:	eb d0       	rcall	.+470    	; 0xa6e <__fp_split3>
 898:	98 f3       	brcs	.-26     	; 0x880 <__divsf3+0x4>

0000089a <__divsf3_pse>:
 89a:	99 23       	and	r25, r25
 89c:	c9 f3       	breq	.-14     	; 0x890 <__divsf3+0x14>
 89e:	55 23       	and	r21, r21
 8a0:	b1 f3       	breq	.-20     	; 0x88e <__divsf3+0x12>
 8a2:	95 1b       	sub	r25, r21
 8a4:	55 0b       	sbc	r21, r21
 8a6:	bb 27       	eor	r27, r27
 8a8:	aa 27       	eor	r26, r26
 8aa:	62 17       	cp	r22, r18
 8ac:	73 07       	cpc	r23, r19
 8ae:	84 07       	cpc	r24, r20
 8b0:	38 f0       	brcs	.+14     	; 0x8c0 <__divsf3_pse+0x26>
 8b2:	9f 5f       	subi	r25, 0xFF	; 255
 8b4:	5f 4f       	sbci	r21, 0xFF	; 255
 8b6:	22 0f       	add	r18, r18
 8b8:	33 1f       	adc	r19, r19
 8ba:	44 1f       	adc	r20, r20
 8bc:	aa 1f       	adc	r26, r26
 8be:	a9 f3       	breq	.-22     	; 0x8aa <__divsf3_pse+0x10>
 8c0:	33 d0       	rcall	.+102    	; 0x928 <__divsf3_pse+0x8e>
 8c2:	0e 2e       	mov	r0, r30
 8c4:	3a f0       	brmi	.+14     	; 0x8d4 <__divsf3_pse+0x3a>
 8c6:	e0 e8       	ldi	r30, 0x80	; 128
 8c8:	30 d0       	rcall	.+96     	; 0x92a <__divsf3_pse+0x90>
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	50 40       	sbci	r21, 0x00	; 0
 8ce:	e6 95       	lsr	r30
 8d0:	00 1c       	adc	r0, r0
 8d2:	ca f7       	brpl	.-14     	; 0x8c6 <__divsf3_pse+0x2c>
 8d4:	29 d0       	rcall	.+82     	; 0x928 <__divsf3_pse+0x8e>
 8d6:	fe 2f       	mov	r31, r30
 8d8:	27 d0       	rcall	.+78     	; 0x928 <__divsf3_pse+0x8e>
 8da:	66 0f       	add	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	88 1f       	adc	r24, r24
 8e0:	bb 1f       	adc	r27, r27
 8e2:	26 17       	cp	r18, r22
 8e4:	37 07       	cpc	r19, r23
 8e6:	48 07       	cpc	r20, r24
 8e8:	ab 07       	cpc	r26, r27
 8ea:	b0 e8       	ldi	r27, 0x80	; 128
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <__divsf3_pse+0x56>
 8ee:	bb 0b       	sbc	r27, r27
 8f0:	80 2d       	mov	r24, r0
 8f2:	bf 01       	movw	r22, r30
 8f4:	ff 27       	eor	r31, r31
 8f6:	93 58       	subi	r25, 0x83	; 131
 8f8:	5f 4f       	sbci	r21, 0xFF	; 255
 8fa:	2a f0       	brmi	.+10     	; 0x906 <__divsf3_pse+0x6c>
 8fc:	9e 3f       	cpi	r25, 0xFE	; 254
 8fe:	51 05       	cpc	r21, r1
 900:	68 f0       	brcs	.+26     	; 0x91c <__divsf3_pse+0x82>
 902:	8d c0       	rjmp	.+282    	; 0xa1e <__fp_inf>
 904:	d7 c0       	rjmp	.+430    	; 0xab4 <__fp_szero>
 906:	5f 3f       	cpi	r21, 0xFF	; 255
 908:	ec f3       	brlt	.-6      	; 0x904 <__divsf3_pse+0x6a>
 90a:	98 3e       	cpi	r25, 0xE8	; 232
 90c:	dc f3       	brlt	.-10     	; 0x904 <__divsf3_pse+0x6a>
 90e:	86 95       	lsr	r24
 910:	77 95       	ror	r23
 912:	67 95       	ror	r22
 914:	b7 95       	ror	r27
 916:	f7 95       	ror	r31
 918:	9f 5f       	subi	r25, 0xFF	; 255
 91a:	c9 f7       	brne	.-14     	; 0x90e <__divsf3_pse+0x74>
 91c:	88 0f       	add	r24, r24
 91e:	91 1d       	adc	r25, r1
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret
 928:	e1 e0       	ldi	r30, 0x01	; 1
 92a:	66 0f       	add	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	bb 1f       	adc	r27, r27
 932:	62 17       	cp	r22, r18
 934:	73 07       	cpc	r23, r19
 936:	84 07       	cpc	r24, r20
 938:	ba 07       	cpc	r27, r26
 93a:	20 f0       	brcs	.+8      	; 0x944 <__divsf3_pse+0xaa>
 93c:	62 1b       	sub	r22, r18
 93e:	73 0b       	sbc	r23, r19
 940:	84 0b       	sbc	r24, r20
 942:	ba 0b       	sbc	r27, r26
 944:	ee 1f       	adc	r30, r30
 946:	88 f7       	brcc	.-30     	; 0x92a <__divsf3_pse+0x90>
 948:	e0 95       	com	r30
 94a:	08 95       	ret

0000094c <__fixunssfsi>:
 94c:	98 d0       	rcall	.+304    	; 0xa7e <__fp_splitA>
 94e:	88 f0       	brcs	.+34     	; 0x972 <__fixunssfsi+0x26>
 950:	9f 57       	subi	r25, 0x7F	; 127
 952:	90 f0       	brcs	.+36     	; 0x978 <__fixunssfsi+0x2c>
 954:	b9 2f       	mov	r27, r25
 956:	99 27       	eor	r25, r25
 958:	b7 51       	subi	r27, 0x17	; 23
 95a:	a0 f0       	brcs	.+40     	; 0x984 <__fixunssfsi+0x38>
 95c:	d1 f0       	breq	.+52     	; 0x992 <__fixunssfsi+0x46>
 95e:	66 0f       	add	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	99 1f       	adc	r25, r25
 966:	1a f0       	brmi	.+6      	; 0x96e <__fixunssfsi+0x22>
 968:	ba 95       	dec	r27
 96a:	c9 f7       	brne	.-14     	; 0x95e <__fixunssfsi+0x12>
 96c:	12 c0       	rjmp	.+36     	; 0x992 <__fixunssfsi+0x46>
 96e:	b1 30       	cpi	r27, 0x01	; 1
 970:	81 f0       	breq	.+32     	; 0x992 <__fixunssfsi+0x46>
 972:	9f d0       	rcall	.+318    	; 0xab2 <__fp_zero>
 974:	b1 e0       	ldi	r27, 0x01	; 1
 976:	08 95       	ret
 978:	9c c0       	rjmp	.+312    	; 0xab2 <__fp_zero>
 97a:	67 2f       	mov	r22, r23
 97c:	78 2f       	mov	r23, r24
 97e:	88 27       	eor	r24, r24
 980:	b8 5f       	subi	r27, 0xF8	; 248
 982:	39 f0       	breq	.+14     	; 0x992 <__fixunssfsi+0x46>
 984:	b9 3f       	cpi	r27, 0xF9	; 249
 986:	cc f3       	brlt	.-14     	; 0x97a <__fixunssfsi+0x2e>
 988:	86 95       	lsr	r24
 98a:	77 95       	ror	r23
 98c:	67 95       	ror	r22
 98e:	b3 95       	inc	r27
 990:	d9 f7       	brne	.-10     	; 0x988 <__fixunssfsi+0x3c>
 992:	3e f4       	brtc	.+14     	; 0x9a2 <__fixunssfsi+0x56>
 994:	90 95       	com	r25
 996:	80 95       	com	r24
 998:	70 95       	com	r23
 99a:	61 95       	neg	r22
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	08 95       	ret

000009a4 <__floatunsisf>:
 9a4:	e8 94       	clt
 9a6:	09 c0       	rjmp	.+18     	; 0x9ba <__floatsisf+0x12>

000009a8 <__floatsisf>:
 9a8:	97 fb       	bst	r25, 7
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__floatsisf+0x12>
 9ac:	90 95       	com	r25
 9ae:	80 95       	com	r24
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	99 23       	and	r25, r25
 9bc:	a9 f0       	breq	.+42     	; 0x9e8 <__floatsisf+0x40>
 9be:	f9 2f       	mov	r31, r25
 9c0:	96 e9       	ldi	r25, 0x96	; 150
 9c2:	bb 27       	eor	r27, r27
 9c4:	93 95       	inc	r25
 9c6:	f6 95       	lsr	r31
 9c8:	87 95       	ror	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	b7 95       	ror	r27
 9d0:	f1 11       	cpse	r31, r1
 9d2:	f8 cf       	rjmp	.-16     	; 0x9c4 <__floatsisf+0x1c>
 9d4:	fa f4       	brpl	.+62     	; 0xa14 <__floatsisf+0x6c>
 9d6:	bb 0f       	add	r27, r27
 9d8:	11 f4       	brne	.+4      	; 0x9de <__floatsisf+0x36>
 9da:	60 ff       	sbrs	r22, 0
 9dc:	1b c0       	rjmp	.+54     	; 0xa14 <__floatsisf+0x6c>
 9de:	6f 5f       	subi	r22, 0xFF	; 255
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	16 c0       	rjmp	.+44     	; 0xa14 <__floatsisf+0x6c>
 9e8:	88 23       	and	r24, r24
 9ea:	11 f0       	breq	.+4      	; 0x9f0 <__floatsisf+0x48>
 9ec:	96 e9       	ldi	r25, 0x96	; 150
 9ee:	11 c0       	rjmp	.+34     	; 0xa12 <__floatsisf+0x6a>
 9f0:	77 23       	and	r23, r23
 9f2:	21 f0       	breq	.+8      	; 0x9fc <__floatsisf+0x54>
 9f4:	9e e8       	ldi	r25, 0x8E	; 142
 9f6:	87 2f       	mov	r24, r23
 9f8:	76 2f       	mov	r23, r22
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__floatsisf+0x5e>
 9fc:	66 23       	and	r22, r22
 9fe:	71 f0       	breq	.+28     	; 0xa1c <__floatsisf+0x74>
 a00:	96 e8       	ldi	r25, 0x86	; 134
 a02:	86 2f       	mov	r24, r22
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	2a f0       	brmi	.+10     	; 0xa14 <__floatsisf+0x6c>
 a0a:	9a 95       	dec	r25
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	da f7       	brpl	.-10     	; 0xa0a <__floatsisf+0x62>
 a14:	88 0f       	add	r24, r24
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__fp_inf>:
 a1e:	97 f9       	bld	r25, 7
 a20:	9f 67       	ori	r25, 0x7F	; 127
 a22:	80 e8       	ldi	r24, 0x80	; 128
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	08 95       	ret

00000a2a <__fp_nan>:
 a2a:	9f ef       	ldi	r25, 0xFF	; 255
 a2c:	80 ec       	ldi	r24, 0xC0	; 192
 a2e:	08 95       	ret

00000a30 <__fp_pscA>:
 a30:	00 24       	eor	r0, r0
 a32:	0a 94       	dec	r0
 a34:	16 16       	cp	r1, r22
 a36:	17 06       	cpc	r1, r23
 a38:	18 06       	cpc	r1, r24
 a3a:	09 06       	cpc	r0, r25
 a3c:	08 95       	ret

00000a3e <__fp_pscB>:
 a3e:	00 24       	eor	r0, r0
 a40:	0a 94       	dec	r0
 a42:	12 16       	cp	r1, r18
 a44:	13 06       	cpc	r1, r19
 a46:	14 06       	cpc	r1, r20
 a48:	05 06       	cpc	r0, r21
 a4a:	08 95       	ret

00000a4c <__fp_round>:
 a4c:	09 2e       	mov	r0, r25
 a4e:	03 94       	inc	r0
 a50:	00 0c       	add	r0, r0
 a52:	11 f4       	brne	.+4      	; 0xa58 <__fp_round+0xc>
 a54:	88 23       	and	r24, r24
 a56:	52 f0       	brmi	.+20     	; 0xa6c <__fp_round+0x20>
 a58:	bb 0f       	add	r27, r27
 a5a:	40 f4       	brcc	.+16     	; 0xa6c <__fp_round+0x20>
 a5c:	bf 2b       	or	r27, r31
 a5e:	11 f4       	brne	.+4      	; 0xa64 <__fp_round+0x18>
 a60:	60 ff       	sbrs	r22, 0
 a62:	04 c0       	rjmp	.+8      	; 0xa6c <__fp_round+0x20>
 a64:	6f 5f       	subi	r22, 0xFF	; 255
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	8f 4f       	sbci	r24, 0xFF	; 255
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	08 95       	ret

00000a6e <__fp_split3>:
 a6e:	57 fd       	sbrc	r21, 7
 a70:	90 58       	subi	r25, 0x80	; 128
 a72:	44 0f       	add	r20, r20
 a74:	55 1f       	adc	r21, r21
 a76:	59 f0       	breq	.+22     	; 0xa8e <__fp_splitA+0x10>
 a78:	5f 3f       	cpi	r21, 0xFF	; 255
 a7a:	71 f0       	breq	.+28     	; 0xa98 <__fp_splitA+0x1a>
 a7c:	47 95       	ror	r20

00000a7e <__fp_splitA>:
 a7e:	88 0f       	add	r24, r24
 a80:	97 fb       	bst	r25, 7
 a82:	99 1f       	adc	r25, r25
 a84:	61 f0       	breq	.+24     	; 0xa9e <__fp_splitA+0x20>
 a86:	9f 3f       	cpi	r25, 0xFF	; 255
 a88:	79 f0       	breq	.+30     	; 0xaa8 <__fp_splitA+0x2a>
 a8a:	87 95       	ror	r24
 a8c:	08 95       	ret
 a8e:	12 16       	cp	r1, r18
 a90:	13 06       	cpc	r1, r19
 a92:	14 06       	cpc	r1, r20
 a94:	55 1f       	adc	r21, r21
 a96:	f2 cf       	rjmp	.-28     	; 0xa7c <__fp_split3+0xe>
 a98:	46 95       	lsr	r20
 a9a:	f1 df       	rcall	.-30     	; 0xa7e <__fp_splitA>
 a9c:	08 c0       	rjmp	.+16     	; 0xaae <__fp_splitA+0x30>
 a9e:	16 16       	cp	r1, r22
 aa0:	17 06       	cpc	r1, r23
 aa2:	18 06       	cpc	r1, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	f1 cf       	rjmp	.-30     	; 0xa8a <__fp_splitA+0xc>
 aa8:	86 95       	lsr	r24
 aaa:	71 05       	cpc	r23, r1
 aac:	61 05       	cpc	r22, r1
 aae:	08 94       	sec
 ab0:	08 95       	ret

00000ab2 <__fp_zero>:
 ab2:	e8 94       	clt

00000ab4 <__fp_szero>:
 ab4:	bb 27       	eor	r27, r27
 ab6:	66 27       	eor	r22, r22
 ab8:	77 27       	eor	r23, r23
 aba:	cb 01       	movw	r24, r22
 abc:	97 f9       	bld	r25, 7
 abe:	08 95       	ret

00000ac0 <__mulsf3>:
 ac0:	0b d0       	rcall	.+22     	; 0xad8 <__mulsf3x>
 ac2:	c4 cf       	rjmp	.-120    	; 0xa4c <__fp_round>
 ac4:	b5 df       	rcall	.-150    	; 0xa30 <__fp_pscA>
 ac6:	28 f0       	brcs	.+10     	; 0xad2 <__mulsf3+0x12>
 ac8:	ba df       	rcall	.-140    	; 0xa3e <__fp_pscB>
 aca:	18 f0       	brcs	.+6      	; 0xad2 <__mulsf3+0x12>
 acc:	95 23       	and	r25, r21
 ace:	09 f0       	breq	.+2      	; 0xad2 <__mulsf3+0x12>
 ad0:	a6 cf       	rjmp	.-180    	; 0xa1e <__fp_inf>
 ad2:	ab cf       	rjmp	.-170    	; 0xa2a <__fp_nan>
 ad4:	11 24       	eor	r1, r1
 ad6:	ee cf       	rjmp	.-36     	; 0xab4 <__fp_szero>

00000ad8 <__mulsf3x>:
 ad8:	ca df       	rcall	.-108    	; 0xa6e <__fp_split3>
 ada:	a0 f3       	brcs	.-24     	; 0xac4 <__mulsf3+0x4>

00000adc <__mulsf3_pse>:
 adc:	95 9f       	mul	r25, r21
 ade:	d1 f3       	breq	.-12     	; 0xad4 <__mulsf3+0x14>
 ae0:	95 0f       	add	r25, r21
 ae2:	50 e0       	ldi	r21, 0x00	; 0
 ae4:	55 1f       	adc	r21, r21
 ae6:	62 9f       	mul	r22, r18
 ae8:	f0 01       	movw	r30, r0
 aea:	72 9f       	mul	r23, r18
 aec:	bb 27       	eor	r27, r27
 aee:	f0 0d       	add	r31, r0
 af0:	b1 1d       	adc	r27, r1
 af2:	63 9f       	mul	r22, r19
 af4:	aa 27       	eor	r26, r26
 af6:	f0 0d       	add	r31, r0
 af8:	b1 1d       	adc	r27, r1
 afa:	aa 1f       	adc	r26, r26
 afc:	64 9f       	mul	r22, r20
 afe:	66 27       	eor	r22, r22
 b00:	b0 0d       	add	r27, r0
 b02:	a1 1d       	adc	r26, r1
 b04:	66 1f       	adc	r22, r22
 b06:	82 9f       	mul	r24, r18
 b08:	22 27       	eor	r18, r18
 b0a:	b0 0d       	add	r27, r0
 b0c:	a1 1d       	adc	r26, r1
 b0e:	62 1f       	adc	r22, r18
 b10:	73 9f       	mul	r23, r19
 b12:	b0 0d       	add	r27, r0
 b14:	a1 1d       	adc	r26, r1
 b16:	62 1f       	adc	r22, r18
 b18:	83 9f       	mul	r24, r19
 b1a:	a0 0d       	add	r26, r0
 b1c:	61 1d       	adc	r22, r1
 b1e:	22 1f       	adc	r18, r18
 b20:	74 9f       	mul	r23, r20
 b22:	33 27       	eor	r19, r19
 b24:	a0 0d       	add	r26, r0
 b26:	61 1d       	adc	r22, r1
 b28:	23 1f       	adc	r18, r19
 b2a:	84 9f       	mul	r24, r20
 b2c:	60 0d       	add	r22, r0
 b2e:	21 1d       	adc	r18, r1
 b30:	82 2f       	mov	r24, r18
 b32:	76 2f       	mov	r23, r22
 b34:	6a 2f       	mov	r22, r26
 b36:	11 24       	eor	r1, r1
 b38:	9f 57       	subi	r25, 0x7F	; 127
 b3a:	50 40       	sbci	r21, 0x00	; 0
 b3c:	8a f0       	brmi	.+34     	; 0xb60 <__mulsf3_pse+0x84>
 b3e:	e1 f0       	breq	.+56     	; 0xb78 <__mulsf3_pse+0x9c>
 b40:	88 23       	and	r24, r24
 b42:	4a f0       	brmi	.+18     	; 0xb56 <__mulsf3_pse+0x7a>
 b44:	ee 0f       	add	r30, r30
 b46:	ff 1f       	adc	r31, r31
 b48:	bb 1f       	adc	r27, r27
 b4a:	66 1f       	adc	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	91 50       	subi	r25, 0x01	; 1
 b52:	50 40       	sbci	r21, 0x00	; 0
 b54:	a9 f7       	brne	.-22     	; 0xb40 <__mulsf3_pse+0x64>
 b56:	9e 3f       	cpi	r25, 0xFE	; 254
 b58:	51 05       	cpc	r21, r1
 b5a:	70 f0       	brcs	.+28     	; 0xb78 <__mulsf3_pse+0x9c>
 b5c:	60 cf       	rjmp	.-320    	; 0xa1e <__fp_inf>
 b5e:	aa cf       	rjmp	.-172    	; 0xab4 <__fp_szero>
 b60:	5f 3f       	cpi	r21, 0xFF	; 255
 b62:	ec f3       	brlt	.-6      	; 0xb5e <__mulsf3_pse+0x82>
 b64:	98 3e       	cpi	r25, 0xE8	; 232
 b66:	dc f3       	brlt	.-10     	; 0xb5e <__mulsf3_pse+0x82>
 b68:	86 95       	lsr	r24
 b6a:	77 95       	ror	r23
 b6c:	67 95       	ror	r22
 b6e:	b7 95       	ror	r27
 b70:	f7 95       	ror	r31
 b72:	e7 95       	ror	r30
 b74:	9f 5f       	subi	r25, 0xFF	; 255
 b76:	c1 f7       	brne	.-16     	; 0xb68 <__mulsf3_pse+0x8c>
 b78:	fe 2b       	or	r31, r30
 b7a:	88 0f       	add	r24, r24
 b7c:	91 1d       	adc	r25, r1
 b7e:	96 95       	lsr	r25
 b80:	87 95       	ror	r24
 b82:	97 f9       	bld	r25, 7
 b84:	08 95       	ret

00000b86 <__udivmodhi4>:
 b86:	aa 1b       	sub	r26, r26
 b88:	bb 1b       	sub	r27, r27
 b8a:	51 e1       	ldi	r21, 0x11	; 17
 b8c:	07 c0       	rjmp	.+14     	; 0xb9c <__udivmodhi4_ep>

00000b8e <__udivmodhi4_loop>:
 b8e:	aa 1f       	adc	r26, r26
 b90:	bb 1f       	adc	r27, r27
 b92:	a6 17       	cp	r26, r22
 b94:	b7 07       	cpc	r27, r23
 b96:	10 f0       	brcs	.+4      	; 0xb9c <__udivmodhi4_ep>
 b98:	a6 1b       	sub	r26, r22
 b9a:	b7 0b       	sbc	r27, r23

00000b9c <__udivmodhi4_ep>:
 b9c:	88 1f       	adc	r24, r24
 b9e:	99 1f       	adc	r25, r25
 ba0:	5a 95       	dec	r21
 ba2:	a9 f7       	brne	.-22     	; 0xb8e <__udivmodhi4_loop>
 ba4:	80 95       	com	r24
 ba6:	90 95       	com	r25
 ba8:	bc 01       	movw	r22, r24
 baa:	cd 01       	movw	r24, r26
 bac:	08 95       	ret

00000bae <_exit>:
 bae:	f8 94       	cli

00000bb0 <__stop_program>:
 bb0:	ff cf       	rjmp	.-2      	; 0xbb0 <__stop_program>
